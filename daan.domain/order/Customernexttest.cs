/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Customernexttest:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
        private double? customernexttestid;

     
        private double? dictcustomerid;

        string orderyear;

       
		private double? dicttestitemid; 
		private string engname; 
		private string testcode; 
		private string testname; 
		private string isneededorder; 
		private DateTime createdate;
        DateTime? rerundate;

       
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
        public Customernexttest()
		{
            //ordernexttestid = null;
            //dictcustomerid = null; 
            //dicttestitemid = null; 
            //engname = null; 
            //testcode = null; 
            //testname = null; 
            //isneededorder = null; 
            //createdate = DateTime.Now; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties

        [LogInfo("主键")]
        public double? Customernexttestid
        {
            get { return customernexttestid; }
            set { customernexttestid = value; }
        }

        /// <summary>
        /// 体检年度
        /// </summary>	
        [LogInfo("体检年度")]
        public string Orderyear
        {
            get { return orderyear; }
            set { orderyear = value; }
        }

        /// <summary>
        /// 预约复查时间
        /// </summary>	
        [LogInfo("预约复查时间")]
        public DateTime? Rerundate
        {
            get { return rerundate; }
            set { rerundate = value; }
        }
        /// <summary>
        /// 体检单位id
        /// </summary>
         [LogInfo(" 体检单位id")]
        public double? Dictcustomerid
        {
            get { return dictcustomerid; }
            set { dictcustomerid = value; }
        } 
			
		/// <summary>
		/// 套餐ID，当套餐被拆散存拆散后的组合ID，当用户选单项存单项ID，对应DICTTESTITEM表id
		/// </summary>	
		[LogInfo("套餐ID，当套餐被拆散存拆散后的组合ID，当用户选单项存单项ID，对应DICTTESTITEM表id")]
		public double? Dicttestitemid
		{
			get { return dicttestitemid; }
			set { isChanged |= (dicttestitemid != value); dicttestitemid = value; }
		}
			
		/// <summary>
		/// 测试项英文名
		/// </summary>	
		[LogInfo("测试项英文名")]
		public string Engname
		{
			get { return engname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Engname", value, value.ToString());
				
				isChanged |= (engname != value); engname = value;
			}
		}
			
		/// <summary>
		/// 测试项编号
		/// </summary>	
		[LogInfo("测试项编号")]
		public string Testcode
		{
			get { return testcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Testcode", value, value.ToString());
				
				isChanged |= (testcode != value); testcode = value;
			}
		}
			
		/// <summary>
		/// 测试项中文名
		/// </summary>	
		[LogInfo("测试项中文名")]
		public string Testname
		{
			get { return testname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Testname", value, value.ToString());
				
				isChanged |= (testname != value); testname = value;
			}
		}
			
		/// <summary>
		/// 是否必做套餐  1 是  0 否
		/// </summary>	
		[LogInfo("是否必做套餐  1 是  0 否")]
		public string Isneededorder
		{
			get { return isneededorder; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Isneededorder", value, value.ToString());
				
				isChanged |= (isneededorder != value); isneededorder = value;
			}
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
