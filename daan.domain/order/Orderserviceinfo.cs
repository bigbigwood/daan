/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Orderserviceinfo:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private string orderserviceinfoid; 
		private string ordernum; 
		private string dictuserid; 
		private DateTime createdate; 
		private string servicecontent; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Orderserviceinfo()
		{
			orderserviceinfoid = null; 
			ordernum = null; 
			dictuserid = null; 
			createdate = new DateTime(); 
			servicecontent = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public string Orderserviceinfoid
		{
			get { return orderserviceinfoid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Orderserviceinfoid", value, value.ToString());
				
				isChanged |= (orderserviceinfoid != value); orderserviceinfoid = value;
			}
		}
			
		/// <summary>
		/// 体检流水号
		/// </summary>	
		[LogInfo("体检流水号")]
		public string Ordernum
		{
			get { return ordernum; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());
				
				isChanged |= (ordernum != value); ordernum = value;
			}
		}
			
		/// <summary>
		/// 跟进人
		/// </summary>	
		[LogInfo("跟进人")]
		public string Dictuserid
		{
			get { return dictuserid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Dictuserid", value, value.ToString());
				
				isChanged |= (dictuserid != value); dictuserid = value;
			}
		}
			
		/// <summary>
		/// 跟进时间
		/// </summary>	
		[LogInfo("跟进时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 跟进内容
		/// </summary>	
		[LogInfo("跟进内容")]
		public string Servicecontent
		{
			get { return servicecontent; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Servicecontent", value, value.ToString());
				
				isChanged |= (servicecontent != value); servicecontent = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
