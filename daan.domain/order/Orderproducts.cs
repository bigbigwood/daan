/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Orderproducts:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? orderproductsid; 
		private string ordernum; 
		private double? dicttestitemid; 
		private string engname; 
		private string testcode; 
		private string testname; 
		private double? standardprice; 
		private double? groupprice; 
		private double? finalprice; 
		private double? contractprice; 
		private string billed; 
		private string status; 
		private DateTime? createdate; 
		private double? displayorder; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Orderproducts()
		{
			orderproductsid = null; 
			ordernum = null; 
			dicttestitemid = null; 
			engname = null; 
			testcode = null; 
			testname = null; 
			standardprice = null; 
			groupprice = null; 
			finalprice = null; 
			contractprice = null; 
			billed = null; 
			status = null; 
			createdate =null; 
			displayorder = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public double? Orderproductsid
		{
			get { return orderproductsid; }
			set { isChanged |= (orderproductsid != value); orderproductsid = value; }
		}
			
		/// <summary>
		/// 体检流水号
		/// </summary>	
		[LogInfo("体检流水号")]
		public string Ordernum
		{
			get { return ordernum; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());
				
				isChanged |= (ordernum != value); ordernum = value;
			}
		}
			
		/// <summary>
		/// 套餐ID，当套餐被拆散存拆散后的组合ID，当用户选单项存单项ID，对应DICTTESTITEM表id
		/// </summary>	
		[LogInfo("套餐ID，当套餐被拆散存拆散后的组合ID，当用户选单项存单项ID，对应DICTTESTITEM表id")]
		public double? Dicttestitemid
		{
			get { return dicttestitemid; }
			set { isChanged |= (dicttestitemid != value); dicttestitemid = value; }
		}
			
		/// <summary>
		/// 测试项英文名
		/// </summary>	
		[LogInfo("测试项英文名")]
		public string Engname
		{
			get { return engname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Engname", value, value.ToString());
				
				isChanged |= (engname != value); engname = value;
			}
		}
			
		/// <summary>
		/// 测试项编号
		/// </summary>	
		[LogInfo("测试项编号")]
		public string Testcode
		{
			get { return testcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Testcode", value, value.ToString());
				
				isChanged |= (testcode != value); testcode = value;
			}
		}
			
		/// <summary>
		/// 测试项中文名
		/// </summary>	
		[LogInfo("测试项中文名")]
		public string Testname
		{
			get { return testname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Testname", value, value.ToString());
				
				isChanged |= (testname != value); testname = value;
			}
		}
			
		/// <summary>
		/// 达安标准价
		/// </summary>	
		[LogInfo("达安标准价")]
		public double? Standardprice
		{
			get { return standardprice; }
			set { isChanged |= (standardprice != value); standardprice = value; }
		}
			
		/// <summary>
		/// 达安不同分点的价钱
		/// </summary>	
		[LogInfo("达安不同分点的价钱")]
		public double? Groupprice
		{
			get { return groupprice; }
			set { isChanged |= (groupprice != value); groupprice = value; }
		}
			
		/// <summary>
		/// 成交价
		/// </summary>	
		[LogInfo("成交价")]
		public double? Finalprice
		{
			get { return finalprice; }
			set { isChanged |= (finalprice != value); finalprice = value; }
		}
			
		/// <summary>
		/// 应收价钱(合同价)
		/// </summary>	
		[LogInfo("应收价钱(合同价)")]
		public double? Contractprice
		{
			get { return contractprice; }
			set { isChanged |= (contractprice != value); contractprice = value; }
		}
			
		/// <summary>
		/// 0-未生成账单清单  1- 已生成账单清单
		/// </summary>	
		[LogInfo("0-未生成账单清单  1- 已生成账单清单")]
		public string Billed
		{
			get { return billed; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Billed", value, value.ToString());
				
				isChanged |= (billed != value); billed = value;
			}
		}
			
		/// <summary>
		/// 项目状态 0-作废  1-正常状态
		/// </summary>	
		[LogInfo("项目状态 0-作废  1-正常状态")]
		public string Status
		{
			get { return status; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				isChanged |= (status != value); status = value;
			}
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime? Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 排序
		/// </summary>	
		[LogInfo("排序")]
		public double? Displayorder
		{
			get { return displayorder; }
			set { isChanged |= (displayorder != value); displayorder = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
