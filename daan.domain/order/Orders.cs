/*
insert license info here
*/
using System;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Orders : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private string ordernum;
        private string remarks;
        private double? dictmemberid;
        private double? dictcustomerid;
        private string realname;
        private string sex;
        private double? caculatedage;
        private string age;
        private string iscancel;
        private string cancelby;
        private DateTime? enterdate;
        private string enterby;
        private double? dictreporttemplateid;
        private DateTime? canaledate;
        private DateTime? lastupdatedate;
        private DateTime? reviewdate;
        private string ordertestlst;
        private string ordertype;
        private double? dictlabid;
        private DateTime? rerundate;
        private string reviewstate;
        private double? authorizedbyid;
        private DateTime? authorizeddate;
        private double? finishbyid;
        private DateTime? finishdate;
        private string pdfstatus;
        private string filename;
        private string status;
        private DateTime? createdate;
        private string transed;
        private string ordersource;
        private string customername;
        private string section;
        private string ismarried;
        private string sms;
        private string mobile;
        private DateTime? samplingdate;
        private string province;
        private string city;
        private string county;
        private string postaddress;
        private string recipient;
        private string contactnumber;
        private string isautofirstcheck;

        private string reportstatus;
        private string reportexceptionreason;
        private DateTime? expreportdate;

        private string area;
        private string batchnumber;
        private string accountmanager;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Orders()
        {
            ordernum = null;
            remarks = null;
            dictmemberid = null;
            dictcustomerid = null;
            realname = null;
            sex = null;
            age = null;
            iscancel = "0";
            cancelby = null;
            enterdate = null;
            enterby = null;
            dictreporttemplateid = null;
            canaledate = null;
            lastupdatedate = null;
            reviewdate = null;
            ordertestlst = null;
            ordertype = "0";
            dictlabid = null;
            rerundate = null;
            reviewstate = "0";
            authorizedbyid = null;
            authorizeddate = null;
            finishbyid = null;
            finishdate = null;
            pdfstatus = "";
            filename = null;
            status = "5";
            createdate = null;
            transed = null;
            sms = null;
            mobile = null;
            samplingdate = null;
            province = null;
            city = null;
            county = null;
            postaddress = null;
            recipient = null; 
            contactnumber = null;
            isautofirstcheck = "0";
            reportstatus = "";
            reportexceptionreason = "";
            expreportdate = null;
            area = null;
            batchnumber = null;
            accountmanager = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 体检流水号
        /// </summary>	
        [LogInfo("体检流水号")]
        public string Ordernum
        {
            get { return ordernum; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());

                isChanged |= (ordernum != value); ordernum = value;
            }
        }

        /// <summary>
        /// 订单备注
        /// </summary>	
        [LogInfo("订单备注")]
        public string Remarks
        {
            get { return remarks; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Remarks", value, value.ToString());

                isChanged |= (remarks != value); remarks = value;
            }
        }

        /// <summary>
        /// 会员ID
        /// </summary>	
        [LogInfo("会员ID")]
        public double? Dictmemberid
        {
            get { return dictmemberid; }
            set { isChanged |= (dictmemberid != value); dictmemberid = value; }
        }

        /// <summary>
        /// 所属客户ID
        /// </summary>	
        [LogInfo("所属客户ID")]
        public double? Dictcustomerid
        {
            get { return dictcustomerid; }
            set { isChanged |= (dictcustomerid != value); dictcustomerid = value; }
        }

        /// <summary>
        /// 真实姓名
        /// </summary>	
        [LogInfo("真实姓名")]
        public string Realname
        {
            get { return realname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Realname", value, value.ToString());

                isChanged |= (realname != value); realname = value;
            }
        }

        /// <summary>
        /// 性别 对应INITBASIC表
        /// </summary>	
        [LogInfo("性别 对应INITBASIC表")]
        public string Sex
        {
            get { return sex; }
            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for Sex", value, value.ToString());

                isChanged |= (sex != value); sex = value;
            }
        }

        /// <summary>
        /// 计算后的年龄（小时为单位）
        /// </summary>	
        [LogInfo("计算后的年龄（小时为单位）")]
        public double? Caculatedage
        {
            get { return caculatedage; }
            set { isChanged |= (caculatedage != value); caculatedage = value; }
        }

        /// <summary>
        /// 年龄
        /// </summary>	
        [LogInfo("年龄")]
        public string Age
        {
            get { return age; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Age", value, value.ToString());

                isChanged |= (age != value); age = value;
            }
        }


        /// <summary>
        /// 是否作废  0 正常 1 作废
        /// </summary>	
        [LogInfo("是否作废  0 正常 1 作废")]
        public string Iscancel
        {
            get { return iscancel; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Iscancel", value, value.ToString());

                isChanged |= (iscancel != value); iscancel = value;
            }
        }

        /// <summary>
        /// 作废人
        /// </summary>	
        [LogInfo("作废人")]
        public string Cancelby
        {
            get { return cancelby; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Canaleby", value, value.ToString());

                isChanged |= (cancelby != value); cancelby = value;
            }
        }

        /// <summary>
        /// 录单时间
        /// </summary>	
        [LogInfo("录单时间")]
        public DateTime? Enterdate
        {
            get { return enterdate; }
            set { isChanged |= (enterdate != value); enterdate = value; }
        }

        /// <summary>
        /// 录单人
        /// </summary>	
        [LogInfo("录单人")]
        public string Enterby
        {
            get { return enterby; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Enterby", value, value.ToString());

                isChanged |= (enterby != value); enterby = value;
            }
        }

        /// <summary>
        /// 报告模板ID
        /// </summary>	
        [LogInfo("报告模板ID")]
        public double? Dictreporttemplateid
        {
            get { return dictreporttemplateid; }
            set { isChanged |= (dictreporttemplateid != value); dictreporttemplateid = value; }
        }

        /// <summary>
        /// 作废时间
        /// </summary>	
        [LogInfo("作废时间")]
        public DateTime? Canaledate
        {
            get { return canaledate; }
            set { isChanged |= (canaledate != value); canaledate = value; }
        }

        /// <summary>
        /// 最后更新时间
        /// </summary>	
        [LogInfo("最后更新时间")]
        public DateTime? Lastupdatedate
        {
            get { return lastupdatedate; }
            set { isChanged |= (lastupdatedate != value); lastupdatedate = value; }
        }

        /// <summary>
        /// 复查时间
        /// </summary>	
        [LogInfo("复查时间")]
        public DateTime? Reviewdate
        {
            get { return reviewdate; }
            set { isChanged |= (reviewdate != value); reviewdate = value; }
        }

        /// <summary>
        /// 项目清单（冗余字段）
        /// </summary>	
        [LogInfo("项目清单（冗余字段）")]
        public string Ordertestlst
        {
            get { return ordertestlst; }
            set
            {
                if (value != null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Ordertestlst字段超出4000长度限制", value, value);

                isChanged |= (ordertestlst != value); ordertestlst = value;
            }
        }

        /// <summary>
        /// 订单类型，0：线上电子商务入口；1：线下体检系统入口
        /// </summary>	
        [LogInfo("订单类型，0：线上电子商务入口；1：线下体检系统入口")]
        public string Ordertype
        {
            get { return ordertype; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Ordertype", value, value.ToString());

                isChanged |= (ordertype != value); ordertype = value;
            }
        }

        /// <summary>
        /// 分点ID
        /// </summary>	
        [LogInfo("分点ID")]
        public double? Dictlabid
        {
            get { return dictlabid; }
            set { isChanged |= (dictlabid != value); dictlabid = value; }
        }

        /// <summary>
        /// 预约复查时间
        /// </summary>	
        [LogInfo("预约复查时间")]
        public DateTime? Rerundate
        {
            get { return rerundate; }
            set { isChanged |= (rerundate != value); rerundate = value; }
        }

        /// <summary>
        /// 跟进状态 0跟进中，1跟进完成
        /// </summary>	
        [LogInfo("跟进状态 0跟进中，1跟进完成")]
        public string Reviewstate
        {
            get { return reviewstate; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Reviewstate", value, value.ToString());

                isChanged |= (reviewstate != value); reviewstate = value;
            }
        }

        /// <summary>
        /// 总检医生ID
        /// </summary>	
        [LogInfo("总检医生ID")]
        public double? Authorizedbyid
        {
            get { return authorizedbyid; }
            set { isChanged |= (authorizedbyid != value); authorizedbyid = value; }
        }

        /// <summary>
        /// 总检时间
        /// </summary>	
        [LogInfo("总检时间")]
        public DateTime? Authorizeddate
        {
            get { return authorizeddate; }
            set { isChanged |= (authorizeddate != value); authorizeddate = value; }
        }

        /// <summary>
        /// 完成医生ID
        /// </summary>	
        [LogInfo("完成医生ID")]
        public double? Finishbyid
        {
            get { return finishbyid; }
            set { isChanged |= (finishbyid != value); finishbyid = value; }
        }

        /// <summary>
        /// 完成时间
        /// </summary>	
        [LogInfo("完成时间")]
        public DateTime? Finishdate
        {
            get { return finishdate; }
            set { isChanged |= (finishdate != value); finishdate = value; }
        }

        /// <summary>
        /// 0未生成PDF，1已生成PDF
        /// </summary>	
        [LogInfo("0未生成PDF，1已生成PDF")]
        public string Pdfstatus
        {
            get { return pdfstatus; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Pdfstatus", value, value.ToString());

                isChanged |= (pdfstatus != value); pdfstatus = value;
            }
        }

        /// <summary>
        /// 报告单文件路径
        /// </summary>	
        [LogInfo("报告单文件路径")]
        public string Filename
        {
            get { return filename; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Filename", value, value.ToString());

                isChanged |= (filename != value); filename = value;
            }
        }

        /// <summary>
        /// 状态
        /// </summary>	
        [LogInfo("状态")]
        public string Status
        {
            get { return status; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());

                isChanged |= (status != value); status = value;
            }
        }

        /// <summary>
        /// 创建日期
        /// </summary>	
        [LogInfo("创建日期")]
        public DateTime? Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }
        /// <summary>
        /// 采样时间
        /// </summary>	
        [LogInfo("采样时间")]
        public DateTime? SamplingDate
        {
            get { return samplingdate; }
            set { isChanged |= (samplingdate != value); samplingdate = value; }
        }

        /// <summary>
        /// 是否下载 0 未下载  1已下载
        /// </summary>	
        [LogInfo("是否下载 0 未下载  1已下载")]
        public string Transed
        {
            get { return transed; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Transed", value, value.ToString());

                isChanged |= (transed != value); transed = value;
            }
        }

        /// <summary>
        /// 订单来源  0 个人体检  1  单位体检
        /// </summary>	
        [LogInfo("订单来源  0 个人体检  1  单位体检")]
        public string Ordersource
        {
            get { return ordersource; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for ordersource", value, value.ToString());

                isChanged |= (ordersource != value); ordersource = value;
            }
        }
        [LogInfo("省份")]
        public string Province
        {
            get { return province; }
            set
            {
                isChanged |= (province != value); province = value;
            }
        }
        [LogInfo("市")]
        public string City
        {
            get { return city; }
            set
            {
                isChanged |= (city != value); city = value;
            }
        }
        [LogInfo("县/市")]
        public string County
        {
            get { return county; }
            set
            {
                isChanged |= (county != value); county = value;
            }
        }
        /// <summary>
        /// 报告邮寄地址
        /// </summary>
        [LogInfo("报告邮寄地址")]
        public string PostAddress
        {
            get { return postaddress; }
            set
            {
                isChanged |= (postaddress != value); postaddress = value;
            }
        }
        /// <summary>
        /// 收件人
        /// </summary>
        [LogInfo("收件人")]
        public string Recipient
        {
            get { return recipient; }
            set
            {
                isChanged |= (recipient != value); recipient = value;
            }
        }
        /// <summary>
        /// 联系电话
        /// </summary>
        [LogInfo("联系电话")]
        public string ContactNumber
        {
            get { return contactnumber; }
            set
            {
                isChanged |= (contactnumber != value); contactnumber = value;
            }
        }
        /// <summary>
        /// 是否已进行自动初步总检扫描
        /// </summary>
        public string IsAutoFirstCheck
        {
            get { return isautofirstcheck; }
            set {
                isChanged |= (isautofirstcheck != value); isautofirstcheck = value;
            }
        }

        /// <summary>
        /// 体检单位
        /// </summary>	
        public string Customername
        {
            get { return customername; }
            set { customername = value; }
        }

        /// <summary>
        /// 体检单位的部门
        /// </summary>	
        [LogInfo("体检单位的部门")]
        public string Section
        {
            get { return section; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for section", value, value.ToString());

                isChanged |= (section != value); section = value;
            }
        }

        /// <summary>
        /// 营业区
        /// </summary>	
        [LogInfo("营业区")]
        public string Area
        {
            get { return area; }
            set { isChanged |= (area != value); area = value; }
        }

        /// <summary>
        /// 场次号
        /// </summary>	
        [LogInfo("场次号")]
        public string BatchNumber
        {
            get { return batchnumber; }
            set { isChanged |= (batchnumber != value); batchnumber = value; }
        }

        /// <summary>
        /// 客户经理
        /// </summary>
        [LogInfo("客户经理")]
        public string AccountManager
        {
            get { return accountmanager; }
            set { isChanged |= (accountmanager != value); accountmanager = value; }
        }

        /// <summary>
        /// 是否结婚 1是  0 否 2 未知，对应规则公式全部
        /// </summary>	
        [LogInfo("时候结婚 1是  0 否 2 未知")]
        public string Ismarried
        {
            get { return ismarried; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for ismarried", value, value.ToString());

                isChanged |= (ismarried != value); ismarried = value;
            }
        }

        /// <summary>
        /// 已发短信
        /// </summary>	
        [LogInfo("已发短信")]
        public string Sms
        {
            get { return sms; }
            set
            {
                if (value != null && value.Length > 300)
                    throw new ArgumentOutOfRangeException("短信内容最大值为300个汉字", value, value.ToString());

                isChanged |= (sms != value); sms = value;
            }
        }
        /// <summary>
        /// 手机号码
        /// </summary>	
        [LogInfo("手机号码")]
        public string Mobile
        {
            get { return mobile; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Mobile", value, value.ToString());

                isChanged |= (mobile != value); mobile = value;
            }
        }
        /// <summary>
        /// 报告状态（0 正常 1 延迟 2 退单）
        /// </summary>
        public string ReportStatus
        {
            get { return reportstatus; }
            set { isChanged |= (reportstatus != value); reportstatus = value; }
        }
        /// <summary>
        /// 异常原因
        /// </summary>
        public string ReportExceptionReason
        {
            get { return reportexceptionreason; }
            set { isChanged |= (reportexceptionreason != value); reportexceptionreason = value; }
        }
        /// <summary>
        /// 预计发单日期
        /// </summary>
        public DateTime? ExpReportDate
        {
            get { return expreportdate; }
            set { isChanged |= (expreportdate != value); expreportdate = value; }
        }
        
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
