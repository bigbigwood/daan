/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Orderbarcode:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? orderbarcodeid; 
		private string ordernum; 
		private string barcode; 
		private double? specimentypeid; 
		private string pathologytypename; 
		private string pathologyno; 
		private string pathologyaddress; 
		private string hashcode; 
		private string status; 
		private DateTime? collectdate; 
        private double? collectby;
        private string tubegroup;
		private double? receiveby; 
		private DateTime? receivedate; 
		private double? releaseby; 
		private DateTime? releasedate; 
		private DateTime? authorizedate; 
		private double? authorizeby; 
		private DateTime? signaturedate; 
		private double? signatureby; 
		private DateTime? createdate; 
		private double? dictlabdeptid; 
		private string testnames;
        private string realname;
        private string itemname;
        private string ensurestatus;
        private string username;
        private string labdeptname;

       

       
       
       

      
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Orderbarcode()
		{
			orderbarcodeid = null; 
			ordernum = null; 
			barcode = ""; 
			specimentypeid = null;
            pathologytypename = "";
            pathologyno = "";
            pathologyaddress = "";
            hashcode = "";
            status = "5"; 
			collectdate = null; 
			collectby = null;
            tubegroup = "";
			receiveby = null; 
			receivedate = null; 
			releaseby = null; 
			releasedate = null; 
			authorizedate = null; 
			authorizeby = null; 
			signaturedate = null; 
			signatureby = null; 
			createdate = null; 
			dictlabdeptid = null; 
			testnames = null;
            realname = null;
            itemname = null;
            ensurestatus = null;
            username = null;
            labdeptname = null;

		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 自动生成
		/// </summary>	
		[LogInfo("自动生成")]
		public double? Orderbarcodeid
		{
			get { return orderbarcodeid; }
			set { isChanged |= (orderbarcodeid != value); orderbarcodeid = value; }
		}
			
		/// <summary>
		/// 体检流水号
		/// </summary>	
		[LogInfo("体检流水号")]
		public string Ordernum
		{
			get { return ordernum; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());
				
				isChanged |= (ordernum != value); ordernum = value;
			}
		}
			
		/// <summary>
		/// 条码号，根据分管原则分管
		/// </summary>	
		[LogInfo("条码号，根据分管原则分管")]
		public string Barcode
		{
			get { return barcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Barcode", value, value.ToString());
				
				isChanged |= (barcode != value); barcode = value;
			}
		}
			
		/// <summary>
		/// 标本类型
		/// </summary>	
		[LogInfo("标本类型")]
		public double? Specimentypeid
		{
			get { return specimentypeid; }
			set { isChanged |= (specimentypeid != value); specimentypeid = value; }
		}
			
		/// <summary>
		/// 病理类型，病理结果用
		/// </summary>	
		[LogInfo("病理类型，病理结果用")]
		public string Pathologytypename
		{
			get { return pathologytypename; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologytypename", value, value.ToString());
				
				isChanged |= (pathologytypename != value); pathologytypename = value;
			}
		}
			
		/// <summary>
		/// 病理号
		/// </summary>	
		[LogInfo("病理号")]
		public string Pathologyno
		{
			get { return pathologyno; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologyno", value, value.ToString());
				
				isChanged |= (pathologyno != value); pathologyno = value;
			}
		}
			
		/// <summary>
		/// 病理地址
		/// </summary>	
		[LogInfo("病理地址")]
		public string Pathologyaddress
		{
			get { return pathologyaddress; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologyaddress", value, value.ToString());
				
				isChanged |= (pathologyaddress != value); pathologyaddress = value;
			}
		}
			
		/// <summary>
		/// 数字签名序列号
		/// </summary>	
		[LogInfo("数字签名序列号")]
		public string Hashcode
		{
			get { return hashcode; }
			set	
			{
				if( value!= null && value.Length > 256)
					throw new ArgumentOutOfRangeException("Invalid value for Hashcode", value, value.ToString());
				
				isChanged |= (hashcode != value); hashcode = value;
			}
		}
			
		/// <summary>
		/// 标本状态
		/// </summary>	
		[LogInfo("标本状态")]
		public string Status
		{
			get { return status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Specimenstatus", value, value.ToString());
				
				isChanged |= (status != value); status = value;
			}
		}
			
		/// <summary>
		/// 标本采集日期
		/// </summary>	
		[LogInfo("标本采集日期")]
		public DateTime? Collectdate
		{
			get { return collectdate; }
			set { isChanged |= (collectdate != value); collectdate = value; }
		}
			
		/// <summary>
		/// 标本采集人
		/// </summary>	
		[LogInfo("标本采集人")]
		public double? Collectby
		{
			get { return collectby; }
			set { isChanged |= (collectby != value); collectby = value; }
		}

        /// <summary>
        /// 分管原则
        /// </summary>	
        [LogInfo("分管原则")]
        public string Tubegroup
        {
            get { return tubegroup; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for tubegroup", value, value.ToString());

                isChanged |= (tubegroup != value); tubegroup = value;
            }
        }
			
		/// <summary>
		/// 标本接收人
		/// </summary>	
		[LogInfo("标本接收人")]
		public double? Receiveby
		{
			get { return receiveby; }
			set { isChanged |= (receiveby != value); receiveby = value; }
		}
			
		/// <summary>
		/// 标本接收时间
		/// </summary>	
		[LogInfo("标本接收时间")]
		public DateTime? Receivedate
		{
			get { return receivedate; }
			set { isChanged |= (receivedate != value); receivedate = value; }
		}
			
		/// <summary>
		/// 技术员初审/病理的初诊医生
		/// </summary>	
		[LogInfo("技术员初审/病理的初诊医生")]
		public double? Releaseby
		{
			get { return releaseby; }
			set { isChanged |= (releaseby != value); releaseby = value; }
		}
			
		/// <summary>
		/// 技术员初审时间
		/// </summary>	
		[LogInfo("技术员初审时间")]
		public DateTime? Releasedate
		{
			get { return releasedate; }
			set { isChanged |= (releasedate != value); releasedate = value; }
		}
			
		/// <summary>
		/// 审核时间
		/// </summary>	
		[LogInfo("审核时间")]
		public DateTime? Authorizedate
		{
			get { return authorizedate; }
			set { isChanged |= (authorizedate != value); authorizedate = value; }
		}
			
		/// <summary>
		/// 审核人/病理的复诊医生
		/// </summary>	
		[LogInfo("审核人/病理的复诊医生")]
		public double? Authorizeby
		{
			get { return authorizeby; }
			set { isChanged |= (authorizeby != value); authorizeby = value; }
		}
			
		/// <summary>
		/// 数字签名日期
		/// </summary>	
		[LogInfo("数字签名日期")]
		public DateTime? Signaturedate
		{
			get { return signaturedate; }
			set { isChanged |= (signaturedate != value); signaturedate = value; }
		}
			
		/// <summary>
		/// 数字签名人
		/// </summary>	
		[LogInfo("数字签名人")]
		public double? Signatureby
		{
			get { return signatureby; }
			set { isChanged |= (signatureby != value); signatureby = value; }
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime? Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 测试项物理实验室分组,对应表DICTLABDEPT
		/// </summary>	
		[LogInfo("测试项物理实验室分组,对应表DICTLABDEPT")]
		public double? Dictlabdeptid
		{
			get { return dictlabdeptid; }
			set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
		}
			
		/// <summary>
		/// 多个项目用逗号隔开
		/// </summary>	
		[LogInfo("多个项目用逗号隔开")]
		public string Testnames
		{
			get { return testnames; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Testnames", value, value.ToString());
				
				isChanged |= (testnames != value); testnames = value;
			}
		}

        /// <summary>
        /// 姓名
        /// </summary>	
        [LogInfo("姓名")]
        public string Realname
        {
            get { return realname; }
            set { realname = value; }
        }

        /// <summary>
        ///样本类型
        /// </summary>	
        [LogInfo("样本类型")]
        public string Itemname
        {
            get { return itemname; }
            set { itemname = value; }
        }

        /// <summary>
        ///采样状态
        /// </summary>	
        [LogInfo("采样状态")]
        public string Ensurestatus
        {
            get { return ensurestatus; }
            set { ensurestatus = value; }
        }


        /// <summary>
        ///确认人
        /// </summary>	
        [LogInfo("确认人")]
        public string Username
        {
            get { return username; }
            set { username = value; }
        }

        /// <summary>
        ///科室
        /// </summary>	
        [LogInfo("科室")]
        public string Labdeptname
        {
            get { return labdeptname; }
            set { labdeptname = value; }
        }

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
