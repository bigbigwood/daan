/*
insert license info here
*/
using System;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Ordertest : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private double? ordertestid;
        private string ordernum;
        private string barcode;
        private string testmethod;
        private double? dictproductsid;
        private double? dictgroupid;
        private string dictgroupname;
        private double? dicttestitemid;
        private string engname;
        private string englongname;
        private string testcode;
        private string testname;
        private double? parentid;
        private double? inputtemplateitemid;
        private double? treelevel;
        private string hlflag;
        private DateTime? lastdate;
        private string lastresult;
        private string testresult;
        private string unit;
        private string textshow;
        private string report;
        private double? displayorder;
        private string testresulttype;
        private double? dictlabdeptid;
        private string reflow;
        private string refhigh;
        private string status;
        private string isimportant;
        private double? dictlocusid;
        private string testalias;
        private string averagerisk;
        private DateTime? createdate;
        private string isexception;
        private string hlhint;
        private string isactive;

        private double? transcount;
        private DateTime? transdate;

        private string labdeptname;
        private string uniqueid;
        private string labdepttype;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Ordertest()
        {
            ordertestid = null;
            ordernum = null;
            barcode = null;
            testmethod = null;
            dictproductsid = null;
            dictgroupid = null;
            dictgroupname = null;
            dicttestitemid = null;
            engname = "";
            englongname = "";
            testcode = "";
            testname = null;
            parentid = null;
            inputtemplateitemid = null;
            treelevel = null;
            hlflag = null;
            lastdate = null;
            lastresult = null;
            testresult = null;
            unit = null;
            textshow = null;
            report = null;
            displayorder = null;
            testresulttype = "0";
            dictlabdeptid = null;
            reflow = null;
            refhigh = null;
            status = "0";
            isimportant = "0";
            dictlocusid = null;
            testalias = null;
            averagerisk = null;
            createdate =null;
            isexception = "0";
            hlhint = null;
            isactive = "1";
            uniqueid = null;
            labdeptname = null;
            labdepttype = "2";

            transcount = 0;
            transdate = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 自动生成
        /// </summary>	
        [LogInfo("自动生成")]
        public double? Ordertestid
        {
            get { return ordertestid; }
            set { isChanged |= (ordertestid != value); ordertestid = value; }
        }

        /// <summary>
        /// 订单号
        /// </summary>	
        [LogInfo("订单号")]
        public string Ordernum
        {
            get { return ordernum; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());

                isChanged |= (ordernum != value); ordernum = value;
            }
        }

        /// <summary>
        /// 条码号，根据分管原则分管
        /// </summary>	
        [LogInfo("条码号，根据分管原则分管")]
        public string Barcode
        {
            get { return barcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Barcode", value, value.ToString());

                isChanged |= (barcode != value); barcode = value;
            }
        }

        /// <summary>
        /// 检测方法
        /// </summary>	
        [LogInfo("检测方法")]
        public string Testmethod
        {
            get { return testmethod; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Testmethod", value, value.ToString());

                isChanged |= (testmethod != value); testmethod = value;
            }
        }

        /// <summary>
        /// 产品ID对应DICTTESTITEM表ID
        /// </summary>	
        [LogInfo("产品ID对应DICTTESTITEM表ID")]
        public double? Dictproductsid
        {
            get { return dictproductsid; }
            set { isChanged |= (dictproductsid != value); dictproductsid = value; }
        }

        /// <summary>
        /// 组合ID对应DICTTESTITEM表ID
        /// </summary>	
        [LogInfo("组合ID对应DICTTESTITEM表ID")]
        public double? Dictgroupid
        {
            get { return dictgroupid; }
            set { isChanged |= (dictgroupid != value); dictgroupid = value; }
        }

        /// <summary>
        /// 组合名称
        /// </summary>	
        [LogInfo("组合名称")]
        public string Dictgroupname
        {
            get { return dictgroupname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Dictgroupname", value, value.ToString());

                isChanged |= (dictgroupname != value); dictgroupname = value;
            }
        }

        /// <summary>
        /// 明细项目ID对应DICTTESTITEM表ID
        /// </summary>	
        [LogInfo("明细项目ID对应DICTTESTITEM表ID")]
        public double? Dicttestitemid
        {
            get { return dicttestitemid; }
            set { isChanged |= (dicttestitemid != value); dicttestitemid = value; }
        }

        /// <summary>
        /// 测试项英文名
        /// </summary>	
        [LogInfo("测试项英文名")]
        public string Engname
        {
            get { return engname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Engname", value, value.ToString());

                isChanged |= (engname != value); engname = value;
            }
        }

        /// <summary>
        /// 英文长名称（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("英文长名称（只有TESTTYPE=0需要维护）")]
        public string Englongname
        {
            get { return englongname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Englongname", value, value.ToString());

                isChanged |= (englongname != value); englongname = value;
            }
        }

        /// <summary>
        /// 测试项编号
        /// </summary>	
        [LogInfo("测试项编号")]
        public string Testcode
        {
            get { return testcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Testcode", value, value.ToString());

                isChanged |= (testcode != value); testcode = value;
            }
        }

        /// <summary>
        /// 明细项目名称
        /// </summary>	
        [LogInfo("明细项目名称")]
        public string Testname
        {
            get { return testname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Testname", value, value.ToString());

                isChanged |= (testname != value); testname = value;
            }
        }

        /// <summary>
        /// 父ID，病理结果报告展示用
        /// </summary>	
        [LogInfo("父ID，病理结果报告展示用")]
        public double? Parentid
        {
            get { return parentid; }
            set { isChanged |= (parentid != value); parentid = value; }
        }

        /// <summary>
        /// 子ID，病理报告展示用
        /// </summary>	
        [LogInfo("子ID，病理报告展示用")]
        public double? Inputtemplateitemid
        {
            get { return inputtemplateitemid; }
            set { isChanged |= (inputtemplateitemid != value); inputtemplateitemid = value; }
        }

        /// <summary>
        /// 级别，病理报告展示用
        /// </summary>	
        [LogInfo("级别，病理报告展示用")]
        public double? Treelevel
        {
            get { return treelevel; }
            set { isChanged |= (treelevel != value); treelevel = value; }
        }

        /// <summary>
        /// 高低判别
        /// </summary>	
        [LogInfo("高低判别")]
        public string Hlflag
        {
            get { return hlflag; }
            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for Hlflag", value, value.ToString());

                isChanged |= (hlflag != value); hlflag = value;
            }
        }

        /// <summary>
        /// 上一次时间
        /// </summary>	
        [LogInfo("上一次时间")]
        public DateTime? Lastdate
        {
            get { return lastdate; }
            set { isChanged |= (lastdate != value); lastdate = value; }
        }

        /// <summary>
        /// 上一次结果
        /// </summary>	
        [LogInfo("上一次结果")]
        public string Lastresult
        {
            get { return lastresult; }
            set
            {
                if (value != null && value.Length > 400)
                    throw new ArgumentOutOfRangeException("Invalid value for Lastresult", value, value.ToString());

                isChanged |= (lastresult != value); lastresult = value;
            }
        }

        /// <summary>
        /// 结果
        /// </summary>	
        [LogInfo("结果")]
        public string Testresult
        {
            get { return testresult; }
            set
            {
                if (value != null && value.Length > 400)
                    throw new ArgumentOutOfRangeException("Invalid value for Testresult", value, value.ToString());

                isChanged |= (testresult != value); testresult = value;
            }
        }

        /// <summary>
        /// 单位
        /// </summary>	
        [LogInfo("单位")]
        public string Unit
        {
            get { return unit; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Unit", value, value.ToString());

                isChanged |= (unit != value); unit = value;
            }
        }

        /// <summary>
        /// 参考范围
        /// </summary>	
        [LogInfo("参考范围")]
        public string Textshow
        {
            get { return textshow; }
            set
            {
                if (value != null && value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for Textshow", value, value.ToString());

                isChanged |= (textshow != value); textshow = value;
            }
        }

        /// <summary>
        /// 是否报告
        /// </summary>	
        [LogInfo("是否报告")]
        public string Report
        {
            get { return report; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Report", value, value.ToString());

                isChanged |= (report != value); report = value;
            }
        }

        /// <summary>
        /// 打印次序
        /// </summary>	
        [LogInfo("打印次序")]
        public double? Displayorder
        {
            get { return displayorder; }
            set { isChanged |= (displayorder != value); displayorder = value; }
        }

        /// <summary>
        /// 结果类型：0，常规结果；1，病理结果；2，易感基因结果；3，易感基因风险结果。
        /// </summary>	
        [LogInfo("结果类型：0，常规结果；1，病理结果；2，易感基因结果；3，易感基因风险结果。")]
        public string Testresulttype
        {
            get { return testresulttype; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Resulttype", value, value.ToString());

                isChanged |= (testresulttype != value); testresulttype = value;
            }
        }

        /// <summary>
        /// 测试项物理实验室分组,对应表DICTLABDEPT
        /// </summary>	
        [LogInfo("测试项物理实验室分组,对应表DICTLABDEPT")]
        public double? Dictlabdeptid
        {
            get { return dictlabdeptid; }
            set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
        }

        /// <summary>
        /// 参考低值
        /// </summary>	
        [LogInfo("参考低值")]
        public string Reflow
        {
            get { return reflow; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Reflow", value, value.ToString());

                isChanged |= (reflow != value); reflow = value;
            }
        }

        /// <summary>
        /// 参考高值
        /// </summary>	
        [LogInfo("参考高值")]
        public string Refhigh
        {
            get { return refhigh; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Refhigh", value, value.ToString());

                isChanged |= (refhigh != value); refhigh = value;
            }
        }

        /// <summary>
        /// 结果状态 ，对应INITBASIC表
        /// </summary>	
        [LogInfo("结果状态 ，对应INITBASIC表")]
        public string Status
        {
            get { return status; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());

                isChanged |= (status != value); status = value;
            }
        }

        /// <summary>
        /// 是否对疾病判断重要的项目
        /// </summary>	
        [LogInfo("是否对疾病判断重要的项目")]
        public string Isimportant
        {
            get { return isimportant; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Isimportant", value, value.ToString());

                isChanged |= (isimportant != value); isimportant = value;
            }
        }

        /// <summary>
        /// （易感基因用）基因座ID
        /// </summary>	
        [LogInfo("（易感基因用）基因座ID")]
        public double? Dictlocusid
        {
            get { return dictlocusid; }
            set { isChanged |= (dictlocusid != value); dictlocusid = value; }
        }

        /// <summary>
        /// （易感基因用）项目别名
        /// </summary>	
        [LogInfo("（易感基因用）项目别名")]
        public string Testalias
        {
            get { return testalias; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Testalias", value, value.ToString());

                isChanged |= (testalias != value); testalias = value;
            }
        }

        /// <summary>
        /// （易感基因用）易感基因终身风险值平均风险
        /// </summary>	
        [LogInfo("（易感基因用）易感基因终身风险值平均风险")]
        public string Averagerisk
        {
            get { return averagerisk; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Averagerisk", value, value.ToString());

                isChanged |= (averagerisk != value); averagerisk = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public DateTime? Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }

        /// <summary>
        /// 1异常   0 正常
        /// </summary>	
        [LogInfo("1异常   0 正常")]
        public string Isexception
        {
            get { return isexception; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Isexception", value, value.ToString());

                isChanged |= (isexception != value); isexception = value;
            }
        }
        /// <summary>
        /// 是否异常[Bool]
        /// </summary>	
        [LogInfo("1异常   0 正常")]
        public string IsexceptionToBool
        {
            get
            {
                switch (isexception)
                { 
                    case "1":
                        return "异常";
                    case "0":
                        return "正常";
                    default:
                        return "";
                }               
            }

        }
        /// <summary>
        /// 高低提示，内容为消廋、超重、肥胖、正常、偏低、临界高值、高血压
        /// </summary>	
        [LogInfo("高低提示，内容为消廋、超重、肥胖、正常、偏低、临界高值、高血压")]
        public string Hlhint
        {
            get { return hlhint; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Averagerisk", value, value.ToString());

                isChanged |= (hlhint != value); hlhint = value;
            }
        }

        /// <summary>
        /// 项目是否继续测试    1 继续 0  停止测试
        /// </summary>
        [LogInfo("项目是否继续测试    1 继续 0  停止测试")]
        public string Isactive
        {
            get { return isactive; }
            set { isactive = value; }
        }
        /// <summary>
        /// 科室名称
        /// </summary>	
        [LogInfo("（易感基因用）易感基因终身风险值平均风险")]
        public string Labdeptname
        {
            get { return labdeptname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Labdeptname", value, value.ToString());

                isChanged |= (labdeptname != value); labdeptname = value;
            }
        }
        /// <summary>
        /// 科室类型 1 检查科室 2 检验科室
        /// </summary>	
        [LogInfo("（易感基因用）易感基因终身风险值平均风险")]
        public string LabdeptType
        {
            get { return labdepttype; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Labdeptname", value, value.ToString());

                isChanged |= (labdepttype != value); labdepttype = value;
            }
        }

        /// <summary>
        /// 结果传输次数
        /// </summary>
        [LogInfo("结果传输次数")]
        public double? TransCount
        {
            get { return transcount; }
            set { isChanged |= (transcount != value); transcount = value; }
        }

        /// <summary>
        /// 结果传输时间
        /// </summary>	
        [LogInfo("结果传输时间")]
        public DateTime? TransDate
        {
            get { return transdate; }
            set { isChanged |= (transdate != value); transdate = value; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion

        /// <summary>
        /// 全国唯一编码（只有TESTTYPE=0，1需要维护）
        /// </summary>	
        [LogInfo("全国唯一编码（只有TESTTYPE=0，1需要维护）")]
        public string Uniqueid
        {
            get { return uniqueid; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Uniqueid", value, value.ToString());

                isChanged |= (uniqueid != value); uniqueid = value;
            }
        }

        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
