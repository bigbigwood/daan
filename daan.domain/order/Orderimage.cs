/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Orderimage:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? orderimageid; 
		private string ordernum; 
		private string filename; 
		private double? dicttestid; 
		private double? displayorder; 
		private DateTime createdate; 
		private double? dictlabdeptid; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Orderimage()
		{
			orderimageid = null; 
			ordernum = null; 
			filename = null; 
			dicttestid = null; 
			displayorder = null; 
			createdate = new DateTime(); 
			dictlabdeptid = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public double? Orderimageid
		{
			get { return orderimageid; }
			set { isChanged |= (orderimageid != value); orderimageid = value; }
		}
			
		/// <summary>
		/// 体检流水号
		/// </summary>	
		[LogInfo("体检流水号")]
		public string Ordernum
		{
			get { return ordernum; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());
				
				isChanged |= (ordernum != value); ordernum = value;
			}
		}
			
		/// <summary>
		/// 图片文件路径
		/// </summary>	
		[LogInfo("图片文件路径")]
		public string Filename
		{
			get { return filename; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Filename", value, value.ToString());
				
				isChanged |= (filename != value); filename = value;
			}
		}
			
		/// <summary>
		/// 项目ID 也就是基因位点 ID
		/// </summary>	
		[LogInfo("项目ID 也就是基因位点 ID")]
		public double? Dicttestid
		{
			get { return dicttestid; }
			set { isChanged |= (dicttestid != value); dicttestid = value; }
		}
			
		/// <summary>
		/// 显示次序
		/// </summary>	
		[LogInfo("显示次序")]
		public double? Displayorder
		{
			get { return displayorder; }
			set { isChanged |= (displayorder != value); displayorder = value; }
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 测试项物理实验室分组,对应表DICTLABDEPT
		/// </summary>	
		[LogInfo("测试项物理实验室分组,对应表DICTLABDEPT")]
		public double? Dictlabdeptid
		{
			get { return dictlabdeptid; }
			set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
