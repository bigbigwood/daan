/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Orderlabdeptresult:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? ordertlabdeptresultid; 
		private string ordernum; 
		private double? dictlabdeptid; 
		private string labdeptresult; 
		private DateTime createdate; 
		private string status;
        private Double? appraiseby;
        private DateTime appraisedate;

        //科室名称
        private string labdeptname; 
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Orderlabdeptresult()
		{
			ordertlabdeptresultid = null; 
			ordernum = null; 
			dictlabdeptid = null; 
			labdeptresult = null;
            createdate = DateTime.Now;
			status = null;
            appraiseby = null;
            appraisedate = DateTime.Now;

            labdeptname = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public double? Ordertlabdeptresultid
		{
			get { return ordertlabdeptresultid; }
			set { isChanged |= (ordertlabdeptresultid != value); ordertlabdeptresultid = value; }
		}
			
		/// <summary>
		/// 订单号
		/// </summary>	
		[LogInfo("订单号")]
		public string Ordernum
		{
			get { return ordernum; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());
				
				isChanged |= (ordernum != value); ordernum = value;
			}
		}
			
		/// <summary>
		/// 测试项物理实验室分组,对应表DICTLABDEPT
		/// </summary>	
		[LogInfo("测试项物理实验室分组,对应表DICTLABDEPT")]
		public double? Dictlabdeptid
		{
			get { return dictlabdeptid; }
			set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
		}
			
		/// <summary>
		/// 科室小结内容
		/// </summary>	
		[LogInfo("科室小结内容")]
		public string Labdeptresult
		{
			get { return labdeptresult; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Labdeptresult", value, value.ToString());
				
				isChanged |= (labdeptresult != value); labdeptresult = value;
			}
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 科室结果状态 ，对应INITBASIC表
		/// </summary>	
		[LogInfo("科室结果状态 ，对应INITBASIC表")]
		public string Status
		{
			get { return status; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				isChanged |= (status != value); status = value;
			}
		}

        /// <summary>
        /// 小结医生
        /// </summary>	
        [LogInfo("小结医生")]
        public double? Appraiseby
        {
            get { return appraiseby; }
            set { isChanged |= (appraiseby != value); appraiseby = value; }
        }

        /// <summary>
        /// 小结时间
        /// </summary>	
        [LogInfo("小结时间")]
        public DateTime Appraisedate
        {
            get { return appraisedate; }
            set { isChanged |= (appraisedate != value); appraisedate = value; }
        }

        /// <summary>
        /// 科室名称
        /// </summary>	
        [LogInfo("科室名称")]
        public string Labdeptname
        {
            get { return labdeptname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Labdeptname", value, value.ToString());

                isChanged |= (labdeptname != value); labdeptname = value;
            }
        }

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
