/*
insert license info here
*/
using System;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Ordergrouptest : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private double? ordergrouptestid;
        private string ordernum;
        private string barcode;
        private double? dictproductid;
        private double? dicttestitemid;
        private string engname;
        private string testname;
        private string testcode;
        private string status;
        private string tubegroup;
        private string transed;
        private double? dictlabdeptid;
        private string billed;
        private double? standardprice;
        private double? groupprice;
        private double? contractprice;
        private double? sendoutprice;
        private double? finalprice;
        private string issendouttest;
        private double? sendoutcustomerid;
        private string sendbilled;
        private DateTime? createdate;
        private double? displayorder;
        private string isadd;
        private double? adduserid;
        private double? contractsendoutprice;
        private string operationremark;
        private string productname;
        private string isactive;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Ordergrouptest()
        {
            ordergrouptestid = null;
            ordernum = null;
            barcode = null;
            dictproductid = null;
            dicttestitemid = null;
            engname = null;
            testname = null;
            testcode = null;
            status = null;
            tubegroup = null;
            transed = null;
            dictlabdeptid = null;
            billed = "0";
            standardprice = null;
            groupprice = null;
            contractprice = null;
            sendoutprice = null;
            finalprice = null;
            issendouttest = null;
            sendoutcustomerid = null;
            sendbilled = null;
            createdate = null;
            displayorder = null;
            isadd = null;
            adduserid = null;
            contractsendoutprice = null;
            isactive = "1";
        }
        #endregion // End of Default ( Empty ) Class Constuctor



        /// <summary>
        /// 是否停止测试
        /// </summary>
        public string Isactive
        {
            get { return isactive; }
            set { isactive = value; }
        }

        #region Public Properties

        /// <summary>
        /// 自动生成
        /// </summary>	
        [LogInfo("自动生成")]
        public double? Ordergrouptestid
        {
            get { return ordergrouptestid; }
            set { isChanged |= (ordergrouptestid != value); ordergrouptestid = value; }
        }

        /// <summary>
        /// 体检流水号

        /// </summary>	
        [LogInfo("体检流水号")]
        public string Ordernum
        {
            get { return ordernum; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());

                isChanged |= (ordernum != value); ordernum = value;
            }
        }

        /// <summary>
        /// 条码号，根据分管原则分管
        /// </summary>	
        [LogInfo("条码号，根据分管原则分管")]
        public string Barcode
        {
            get { return barcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Barcode", value, value.ToString());

                isChanged |= (barcode != value); barcode = value;
            }
        }

        /// <summary>
        /// 套餐ID
        /// </summary>	
        [LogInfo("套餐ID")]
        public double? Dictproductid
        {
            get { return dictproductid; }
            set { isChanged |= (dictproductid != value); dictproductid = value; }
        }

        /// <summary>
        /// 套餐下的组合ID，当用户选单项存单项ID，对应DICTTESTITEM表id
        /// </summary>	
        [LogInfo("套餐下的组合ID，当用户选单项存单项ID，对应DICTTESTITEM表id")]
        public double? Dicttestitemid
        {
            get { return dicttestitemid; }
            set { isChanged |= (dicttestitemid != value); dicttestitemid = value; }
        }

        /// <summary>
        /// 测试项英文名
        /// </summary>	
        [LogInfo("测试项英文名")]
        public string Engname
        {
            get { return engname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Engname", value, value.ToString());

                isChanged |= (engname != value); engname = value;
            }
        }

        /// <summary>
        /// 测试项中文名
        /// </summary>	
        [LogInfo("测试项中文名")]
        public string Testname
        {
            get { return testname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Testname", value, value.ToString());

                isChanged |= (testname != value); testname = value;
            }
        }

        private string testnames;
        /// <summary>
        /// 测试项中文名 拼接字段
        /// </summary>	
        [LogInfo("测试项中文名")]
        public string Testnames
        {
            get { return testnames; }
            set { testnames = value; }
        }

        /// <summary>
        /// 测试项编号

        /// </summary>	
        [LogInfo("测试项编号")]
        public string Testcode
        {
            get { return testcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Testcode", value, value.ToString());

                isChanged |= (testcode != value); testcode = value;
            }
        }

        /// <summary>
        /// 状态 对应INITBASIC表

        /// </summary>	
        [LogInfo("状态 对应INITBASIC表")]
        public string Status
        {
            get { return status; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());

                isChanged |= (status != value); status = value;
            }
        }

        /// <summary>
        /// 分管原则（只有TESTTYPE=0需要维护）与dictlibary表dictlibaryid关联
        /// </summary>	
        [LogInfo("分管原则（只有TESTTYPE=0需要维护）与dictlibary表dictlibaryid关联")]
        public string Tubegroup
        {
            get { return tubegroup; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Tubegroup", value, value.ToString());

                isChanged |= (tubegroup != value); tubegroup = value;
            }
        }

        /// <summary>
        /// 传输标志0未传输1已传输，分点实验室拉数据用

        /// </summary>	
        [LogInfo("传输标志0未传输1已传输，分点实验室拉数据用")]
        public string Transed
        {
            get { return transed; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Transed", value, value.ToString());

                isChanged |= (transed != value); transed = value;
            }
        }

        /// <summary>
        /// 测试项物理实验室分组,对应表DICTLABDEPT
        /// </summary>	
        [LogInfo("测试项物理实验室分组,对应表DICTLABDEPT")]
        public double? Dictlabdeptid
        {
            get { return dictlabdeptid; }
            set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
        }

        /// <summary>
        /// 0-未生成账单清单  1- 已生成账单清单
        /// </summary>	
        [LogInfo("0-未生成账单清单  1- 已生成账单清单")]
        public string Billed
        {
            get { return billed; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Billed", value, value.ToString());

                isChanged |= (billed != value); billed = value;
            }
        }

        /// <summary>
        /// 达安标准价
        /// </summary>	
        [LogInfo("达安标准价")]
        public double? Standardprice
        {
            get { return standardprice; }
            set { isChanged |= (standardprice != value); standardprice = value; }
        }

        /// <summary>
        /// 达安不同分点的价钱
        /// </summary>	
        [LogInfo("达安不同分点的价钱")]
        public double? Groupprice
        {
            get { return groupprice; }
            set { isChanged |= (groupprice != value); groupprice = value; }
        }

        /// <summary>
        /// 应收价钱(合同价)
        /// </summary>	
        [LogInfo("应收价钱(合同价)")]
        public double? Contractprice
        {
            get { return contractprice; }
            set { isChanged |= (contractprice != value); contractprice = value; }
        }

        /// <summary>
        /// 外包成交价
        /// </summary>	
        [LogInfo("外包成交价")]
        public double? Sendoutprice
        {
            get { return sendoutprice; }
            set { isChanged |= (sendoutprice != value); sendoutprice = value; }
        }

        /// <summary>
        /// 实收价
        /// </summary>	
        [LogInfo("实收价")]
        public double? Finalprice
        {
            get { return finalprice; }
            set { isChanged |= (finalprice != value); finalprice = value; }
        }

        ///// <summary>
        ///// 是否外包项目0-否  1-是
        ///// </summary>	
        //[LogInfo("是否外包项目0-否  1-是")]
        //public string Issendouttest
        //{
        //    get { return issendouttest; }
        //    set
        //    {
        //        if (value != null && value.Length > 1)
        //            throw new ArgumentOutOfRangeException("Invalid value for Issendouttest", value, value.ToString());

        //        isChanged |= (issendouttest != value); issendouttest = value;
        //    }
        //}

        /// <summary>
        /// 外包客户ID
        /// </summary>	
        [LogInfo("外包客户ID")]
        public double? Sendoutcustomerid
        {
            get { return sendoutcustomerid; }
            set { isChanged |= (sendoutcustomerid != value); sendoutcustomerid = value; }
        }

        /// <summary>
        /// 0-外包未生成账单清单  1- 外包已生成账单清单
        /// </summary>	
        [LogInfo("0-外包未生成账单清单  1- 外包已生成账单清单")]
        public string Sendbilled
        {
            get { return sendbilled; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Sendbilled", value, value.ToString());

                isChanged |= (sendbilled != value); sendbilled = value;
            }
        }

        /// <summary>
        /// 创建时间
        /// </summary>	
        [LogInfo("创建时间")]
        public DateTime? Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }

        /// <summary>
        /// 排序
        /// </summary>	
        [LogInfo("排序")]
        public double? Displayorder
        {
            get { return displayorder; }
            set { isChanged |= (displayorder != value); displayorder = value; }
        }

        /// <summary>
        /// 是否追加项目  0 否  1 是
        /// </summary>	
        [LogInfo("是否追加项目  0 否  1 是")]
        public string Isadd
        {
            get { return isadd; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for isadd", value, value.ToString());

                isChanged |= (isadd != value); isadd = value;
            }
        }

        /// <summary>
        /// 项目追加人
        /// </summary>	
        [LogInfo("项目追加人")]
        public double? Adduserid
        {
            get { return adduserid; }
            set { isChanged |= (adduserid != value); adduserid = value; }
        }
        /// <summary>
        /// 外包协议价
        /// </summary>
        [LogInfo("外包协议价")]
        public double? Contractsendoutprice
        {
            get { return contractsendoutprice; }
            set { isChanged |= (contractsendoutprice != value); contractsendoutprice = value; }
        }


        /// <summary>
        /// 体检指引（只有组合需要维护）
        /// </summary>	
        [LogInfo("体检指引（只有组合需要维护）")]
        public string Operationremark
        {
            get { return operationremark; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for operationremark", value, value.ToString());

                isChanged |= (operationremark != value); operationremark = value;
            }
        }

        /// <summary>
        /// 套餐名称
        /// </summary>	
        [LogInfo("套餐名称")]
        public string Productname
        {
            get { return productname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for isadd", value, value.ToString());

                isChanged |= (productname != value); productname = value;
            }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
