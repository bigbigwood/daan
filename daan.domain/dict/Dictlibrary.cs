/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictlibrary:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? dictlibraryid; 
		private string librarycode; 
		private string libraryname; 
		private DateTime createdate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictlibrary()
		{
			dictlibraryid = 0; 
			librarycode = null; 
			libraryname = null; 
			createdate = DateTime.Now; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键",LogInfoAttribute.LOGFIELDOPTION)]
		public double? Dictlibraryid
		{
			get { return dictlibraryid; }
			set { isChanged |= (dictlibraryid != value); dictlibraryid = value; }
		}
			
		/// <summary>
		/// 代码
		/// </summary>	
		[LogInfo("代码",LogInfoAttribute.LOGFIELDOPTION)]
		public string Librarycode
		{
			get { return librarycode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Librarycode", value, value.ToString());
				
				isChanged |= (librarycode != value); librarycode = value;
			}
		}
			
		/// <summary>
		/// 名称
		/// </summary>	
		[LogInfo("名称",LogInfoAttribute.LOGFIELDOPTION)]
		public string Libraryname
		{
			get { return libraryname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Libraryname", value, value.ToString());
				
				isChanged |= (libraryname != value); libraryname = value;
			}
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
