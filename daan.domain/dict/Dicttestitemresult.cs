/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dicttestitemresult:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? dicttestitemresultid; 
		private double? dicttestitemid; 
		private string result; 
		private string isexception; 
		private double? displayorder; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dicttestitemresult()
		{
			dicttestitemresultid = null; 
			dicttestitemid = null; 
			result = null; 
			isexception = null; 
			displayorder = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 集合ID
		/// </summary>	
		[LogInfo("集合ID")]
		public double? Dicttestitemresultid
		{
			get { return dicttestitemresultid; }
			set { isChanged |= (dicttestitemresultid != value); dicttestitemresultid = value; }
		}
			
		/// <summary>
		/// 测试项目ID
		/// </summary>	
		[LogInfo("测试项目ID")]
		public double? Dicttestitemid
		{
			get { return dicttestitemid; }
			set { isChanged |= (dicttestitemid != value); dicttestitemid = value; }
		}
			
		/// <summary>
		/// 结果
		/// </summary>	
		[LogInfo("结果")]
		public string Result
		{
			get { return result; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Result", value, value.ToString());
				
				isChanged |= (result != value); result = value;
			}
		}
			
		/// <summary>
		/// 1异常   0 正常
		/// </summary>	
		[LogInfo("1异常   0 正常")]
		public string Isexception
		{
			get { return isexception; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Isexception", value, value.ToString());
				
				isChanged |= (isexception != value); isexception = value;
			}
		}
			
		/// <summary>
		/// 排序
		/// </summary>	
		[LogInfo("排序")]
		public double? Displayorder
		{
			get { return displayorder; }
			set { isChanged |= (displayorder != value); displayorder = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
