/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictlab
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private  double? _dictlabid; 
		private string _labname; 
		private string _labdescription; 
		private string _addres; 
		private string _phone; 
		private  double? _displayorder; 
		private string _zpcode; 
		private string _contactman; 
		private string _city; 
		private string _labimage; 
		private string _fax; 
		private string _esitename; 
		private string _website; 
		private string _labcode;
        private char _isactive;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictlab()
		{
			_dictlabid = 0; 
			_labname = null; 
			_labdescription = null; 
			_addres = null; 
			_phone = null; 
			_displayorder = 0; 
			_zpcode = null; 
			_contactman = null; 
			_city = null; 
			_labimage = null; 
			_fax = null; 
			_esitename = null; 
			_website = null; 
			_labcode = null; 
            _isactive='1';
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 自动生成
		/// </summary>		
		public  double? Dictlabid
		{
			get { return _dictlabid; }
			set { _isChanged |= (_dictlabid != value); _dictlabid = value; }
		}
			
		/// <summary>
		/// 试验室名称
		/// </summary>		
		public string Labname
		{
			get { return _labname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Labname", value, value.ToString());
				
				_isChanged |= (_labname != value); _labname = value;
			}
		}
			
		/// <summary>
		/// 试验室描述
		/// </summary>		
		public string Labdescription
		{
			get { return _labdescription; }
			set	
			{
				if( value!= null && value.Length > 2147483647)
					throw new ArgumentOutOfRangeException("Invalid value for Labdescription", value, value.ToString());
				
				_isChanged |= (_labdescription != value); _labdescription = value;
			}
		}
			
		/// <summary>
		/// 地点
		/// </summary>		
		public string Addres
		{
			get { return _addres; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Addres", value, value.ToString());
				
				_isChanged |= (_addres != value); _addres = value;
			}
		}
			
		/// <summary>
		/// 联系电话
		/// </summary>		
		public string Phone
		{
			get { return _phone; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Phone", value, value.ToString());
				
				_isChanged |= (_phone != value); _phone = value;
			}
		}
			
		/// <summary>
		/// 排序
		/// </summary>		
		public  double? Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 邮编
		/// </summary>		
		public string Zpcode
		{
			get { return _zpcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Zpcode", value, value.ToString());
				
				_isChanged |= (_zpcode != value); _zpcode = value;
			}
		}
			
		/// <summary>
		/// 联系人
		/// </summary>		
		public string Contactman
		{
			get { return _contactman; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Contactman", value, value.ToString());
				
				_isChanged |= (_contactman != value); _contactman = value;
			}
		}
			
		/// <summary>
		/// 所在城市
		/// </summary>		
		public string City
		{
			get { return _city; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for City", value, value.ToString());
				
				_isChanged |= (_city != value); _city = value;
			}
		}
			
		/// <summary>
		/// 分点小图片路径
		/// </summary>		
		public string Labimage
		{
			get { return _labimage; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Labimage", value, value.ToString());
				
				_isChanged |= (_labimage != value); _labimage = value;
			}
		}
			
		/// <summary>
		/// 传真
		/// </summary>		
		public string Fax
		{
			get { return _fax; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Fax", value, value.ToString());
				
				_isChanged |= (_fax != value); _fax = value;
			}
		}
			
		/// <summary>
		/// 分点英文名称
		/// </summary>		
		public string Esitename
		{
			get { return _esitename; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Esitename", value, value.ToString());
				
				_isChanged |= (_esitename != value); _esitename = value;
			}
		}
			
		/// <summary>
		/// 网站名称
		/// </summary>		
		public string Website
		{
			get { return _website; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Website", value, value.ToString());
				
				_isChanged |= (_website != value); _website = value;
			}
		}
			
		/// <summary>
		/// 地点代号，例GZ，SH
		/// </summary>		
		public string Labcode
		{
			get { return _labcode; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Labcode", value, value.ToString());
				
				_isChanged |= (_labcode != value); _labcode = value;
			}
		}
        /// <summary>
        /// 0未启用1启用[主要指是否有实验室,判断是否扫描有标本]
        /// </summary>
        public char IsActive
        {
            get{ return _isactive;}
            set{  _isactive=value;}
        }
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
