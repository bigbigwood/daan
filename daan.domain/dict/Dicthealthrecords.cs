/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dicthealthrecords:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? dicthealthrecordsid; 
		private double? dictmemberid; 
		private double? dictrecordtype; 
		private string dictrecordtext; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dicthealthrecords()
		{
			dicthealthrecordsid = null; 
			dictmemberid = null; 
			dictrecordtype = null; 
			dictrecordtext = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 健康档案主键
		/// </summary>	
		[LogInfo("健康档案主键")]
		public double? Dicthealthrecordsid
		{
			get { return dicthealthrecordsid; }
			set { isChanged |= (dicthealthrecordsid != value); dicthealthrecordsid = value; }
		}
			
		/// <summary>
		/// 会员编号
		/// </summary>	
		[LogInfo("会员编号")]
		public double? Dictmemberid
		{
			get { return dictmemberid; }
			set { isChanged |= (dictmemberid != value); dictmemberid = value; }
		}
			
		/// <summary>
		/// 档案类型
		/// </summary>	
		[LogInfo("档案类型")]
		public double? Dictrecordtype
		{
			get { return dictrecordtype; }
			set { isChanged |= (dictrecordtype != value); dictrecordtype = value; }
		}
			
		/// <summary>
		/// 主要内容
		/// </summary>	
		[LogInfo("主要内容")]
		public string Dictrecordtext
		{
			get { return dictrecordtext; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Dictrecordtext", value, value.ToString());
				
				isChanged |= (dictrecordtext != value); dictrecordtext = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
