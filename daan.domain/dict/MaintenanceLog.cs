/*
insert license info here
*/
using System;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Maintenancelog : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private double? maintenancelogid;
        private string tablename;
        private double? recordid;
        private string code;
        private string columnname;
        private string operationtype;
        private string operation;
        private double? operateby;
        private DateTime operatedate;
        private string itemname;
        private string username;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Maintenancelog()
        {
            maintenancelogid = null;
            tablename = null;
            recordid = null;
            code = null;
            columnname = null;
            operationtype = null;
            operation = null;
            operateby = null;
            operatedate = new DateTime();
            itemname = null;
            username = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 主键，自动ID
        /// </summary>	
        [LogInfo("主键，自动ID")]
        public double? Maintenancelogid
        {
            get { return maintenancelogid; }
            set { isChanged |= (maintenancelogid != value); maintenancelogid = value; }
        }

        /// <summary>
        /// 表名/模块名
        /// </summary>	
        [LogInfo("表名/模块名")]
        public string BackTablename
        {
            get {
                if (tablename.ToUpper() == "Dictuser".ToUpper())
                {
                    tablename = "用户资源管理[Dictuser]";
                }
                else if (tablename.ToUpper() == "Billdetail".ToUpper())
                {
                    tablename = "账单明细[Billdetail]";
                }
                else if (tablename.ToUpper() == "Billhead".ToUpper())
                {
                    tablename = "账单信息头表[Billhead]";
                }
                else if (tablename.ToUpper() == "Billtrace".ToUpper())
                {
                    tablename = "账单跟踪[Billtrace]";
                }
                else if (tablename.ToUpper() == "Customernexttest".ToUpper())
                {
                    tablename = "单位下次体检项目推荐[Customernexttest]";
                }
                else if (tablename.ToUpper() == "Customerresultcomment".ToUpper())
                {
                    tablename = "客户结果评价[Customerresultcomment]";
                }
                else if (tablename.ToUpper() == "Customervaliddiagnosis".ToUpper())
                {
                    tablename = "团检客户有效诊断[Customervaliddiagnosis]";
                }
                else if (tablename.ToUpper() == "Dictcustomer".ToUpper())
                {
                    tablename = "体检单位维护[Dictcustomer]";
                }
                else if (tablename.ToUpper() == "Dictcustomerdiscounted".ToUpper())
                {
                    tablename = "客户总体折扣维护[Dictcustomerdiscounted]";
                }
                else if (tablename.ToUpper() == "Dictcustomertestdiscount".ToUpper())
                {
                    tablename = "外包客户项目折扣[Dictcustomertestdiscount]";
                }
                else if (tablename.ToUpper() == "Dictdiagnosis".ToUpper())
                {
                    tablename = "诊断信息[Dictdiagnosis]";
                }
                else if (tablename.ToUpper() == "Dictfamilymedhistory".ToUpper())
                {
                    tablename = "家族病史[Dictfamilymedhistory]";
                }
                else if (tablename.ToUpper() == "Dictfastcomment".ToUpper())
                {
                    tablename = "快速录入模版维护[Dictfastcomment]";
                }
                else if (tablename.ToUpper() == "Dictlab".ToUpper())
                {
                    tablename = "分点维护[Dictlab]";
                }
                else if (tablename.ToUpper() == "Dictlabandtest".ToUpper())
                {
                    tablename = "分点检测项维护[Dictlabandtest]";
                }
                else if (tablename.ToUpper() == "Dictlabandtestprice".ToUpper())
                {
                    tablename = "分点检测项维护价格维护[Dictlabandtestprice]";
                }
                else if (tablename.ToUpper() == "Dictlabdept".ToUpper())
                {
                    tablename = "科室维护[Dictlabdept]";
                }
                else if (tablename.ToUpper() == "Dictlibrary".ToUpper())
                {
                    tablename = "基础字典维护[Dictlibrary]";
                }
                else if (tablename.ToUpper() == "Dictlibraryitem".ToUpper())
                {
                    tablename = "基础字典明细维护[Dictlibraryitem]";
                }
                else if (tablename.ToUpper() == "Dictlocusremark".ToUpper())
                {
                    tablename = "基因座简介[Dictlocusremark]";
                }
                else if (tablename.ToUpper() == "Dictmedhistory".ToUpper())
                {
                    tablename = "既往病史[Dictmedhistory]";
                }
                else if (tablename.ToUpper() == "Dictmember".ToUpper())
                {
                    tablename = "会员用户表[Dictmember]";
                }
                else if (tablename.ToUpper() == "Dictothermedhistory".ToUpper())
                {
                    tablename = "其它病史[Dictothermedhistory]";
                }
                else if (tablename.ToUpper() == "Dictproductdetail".ToUpper())
                {
                    tablename = "套餐明细[Dictproductdetail]";
                }
                else if (tablename.ToUpper() == "Dictreporttemplate".ToUpper())
                {
                    tablename = "报告模板[Dictreporttemplate]";
                }
                else if (tablename.ToUpper() == "Dictruleformular".ToUpper())
                {
                    tablename = "产品建议规则公式[Dictruleformular]";
                }
                else if (tablename.ToUpper() == "Dictscores".ToUpper())
                {
                    tablename = "易感基因结果得分表[Dictscores]";
                }
                else if (tablename.ToUpper() == "Dicttestgroupdetail".ToUpper())
                {
                    tablename = "检查项目组合明细[Dicttestgroupdetail]";
                }
                else if (tablename.ToUpper() == "Dicttestitem".ToUpper())
                {
                    tablename = "检查项目维护[Dicttestitem]";
                }
                else if (tablename.ToUpper() == "Dicttestitemresult".ToUpper())
                {
                    tablename = "检查项目组合明细可选结果[Dicttestitemresult]";
                }
                else if (tablename.ToUpper() == "Dictuserandlab".ToUpper())
                {
                    tablename = "用户分点对应表[Dictuserandlab]";
                }
                else if (tablename.ToUpper() == "Dictuserandlabdept".ToUpper())
                {
                    tablename = "用户物理组对应表[Dictuserandlabdept]";
                }
                else if (tablename.ToUpper() == "Initbasic".ToUpper())
                {
                    tablename = "初始化的基本资料[Initbasic]";
                }
                else if (tablename.ToUpper() == "Initlocalsetting".ToUpper())
                {
                    tablename = "本地参数设定[Initlocalsetting]";
                }
                else if (tablename.ToUpper() == "Initsyssetting".ToUpper())
                {
                    tablename = "系统设定[Initsyssetting]";
                }
                else if (tablename.ToUpper() == "Interfacelog".ToUpper())
                {
                    tablename = "接口日志[Interfacelog]";
                }
                else if (tablename.ToUpper() == "Interfacemanager".ToUpper())
                {
                    tablename = "接口管理表[Interfacemanager]";
                }
                else if (tablename.ToUpper() == "Maintenancelog".ToUpper())
                {
                    tablename = "基础资料表维护日志表[Maintenancelog]";
                }
                else if (tablename.ToUpper() == "Operationlog".ToUpper())
                {
                    tablename = "用于订单的修改留痕和节点信息[Operationlog]";
                }
                else if (tablename.ToUpper() == "Orderbarcode".ToUpper())
                {
                    tablename = "订单条码表[Orderbarcode]";
                }
                else if (tablename.ToUpper() == "Orderdiagnosis".ToUpper())
                {
                    tablename = "订单诊断表[Orderdiagnosis]";
                }
                else if (tablename.ToUpper() == "Ordergrouptest".ToUpper())
                {
                    tablename = "订单对应组合[Ordergrouptest]";
                }
                else if (tablename.ToUpper() == "Orderlabdeptresult".ToUpper())
                {
                    tablename = "科室小结[Orderlabdeptresult]";
                }
                else if (tablename.ToUpper() == "Ordernexttest".ToUpper())
                {
                    tablename = "医生推荐下次检测项目[Ordernexttest]";
                }
                else if (tablename.ToUpper() == "Orderproducts".ToUpper())
                {
                    tablename = "订单套餐表[Orderproducts]";
                }
                else if (tablename.ToUpper() == "Orderresultcomment".ToUpper())
                {
                    tablename = "订单总检信息表[Orderresultcomment]";
                }
                else if (tablename.ToUpper() == "Orders".ToUpper())
                {
                    tablename = "订单主表[Orders]";
                }
                else if (tablename.ToUpper() == "Orderserviceinfo".ToUpper())
                {
                    tablename = "客户订单追踪表情况记录[Orderserviceinfo]";
                }
                else if (tablename.ToUpper() == "Ordertest".ToUpper())
                {
                    tablename = "订单对应明细项目[Ordertest]";
                }
                else if (tablename.ToUpper() == "Tempordernum".ToUpper())
                {
                    tablename = "临时订单表[Tempordernum]";
                }
                return tablename; 
            }
            set
            {
                if (value != null && value.Length > 40)
                    throw new ArgumentOutOfRangeException("Invalid value for Tablename", value, value.ToString());

                isChanged |= (tablename != value); tablename = value;
            }
        }

        /// <summary>
        /// 表名/模块名
        /// </summary>	
        [LogInfo("表名/模块名")]
        public string Tablename
        {
            get
            {  return tablename; }
            set
            {
                if (value != null && value.Length > 40)
                    throw new ArgumentOutOfRangeException("Invalid value for Tablename", value, value.ToString());

                isChanged |= (tablename != value); tablename = value;
            }
        }

        /// <summary>
        /// 行记录所对应的ID值
        /// </summary>	
        [LogInfo("行记录所对应的ID值")]
        public double? Recordid
        {
            get { return recordid; }
            set { isChanged |= (recordid != value); recordid = value; }
        }

        /// <summary>
        /// 行记录对应的CODE，方便用户查询
        /// </summary>	
        [LogInfo("行记录对应的CODE，方便用户查询")]
        public string Code
        {
            get { return code; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Code", value, value.ToString());

                isChanged |= (code != value); code = value;
            }
        }

        /// <summary>
        /// 列名
        /// </summary>	
        [LogInfo("列名")]
        public string Columnname
        {
            get { return columnname == null ? "" : columnname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Columnname", value, value.ToString());

                isChanged |= (columnname != value); columnname = value;
            }
        }

        /// <summary>
        /// 操作类型 ：新建/更新/删除
        /// </summary>	
        [LogInfo("操作类型 ：新建/更新/删除")]
        public string Operationtype
        {
            get { return operationtype == null ? "" : operationtype; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Operationtype", value, value.ToString());

                isChanged |= (operationtype != value); operationtype = value;
            }
        }

        /// <summary>
        /// 操作内容
        /// </summary>	
        [LogInfo("操作内容")]
        public string Operation
        {
            get { return operation == null ? "" : operation; }
            set
            {
                if (value != null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for Operation", value, value.ToString());

                isChanged |= (operation != value); operation = value;
            }
        }

        /// <summary>
        /// 操作者
        /// </summary>	
        [LogInfo("操作者")]
        public double? Operateby
        {
            get { return operateby; }
            set { isChanged |= (operateby != value); operateby = value; }
        }


        /// <summary>
        /// 用户显示用户名称
        /// </summary>	
        [LogInfo("用户显示用户名称")]
        public string Username
        {
            get { return username; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());

                isChanged |= (username != value); username = value;
            }
        }

        /// <summary>
        /// 操作时间
        /// </summary>	
        [LogInfo("操作时间")]
        public DateTime Operatedate
        {
            get { return operatedate; }
            set { isChanged |= (operatedate != value); operatedate = value; }
        }

        /// <summary>
        /// 相关项名称
        /// </summary>	
        [LogInfo("相关项名称")]
        public string Itemname
        {
            get { return itemname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Itemname", value, value.ToString());

                isChanged |= (itemname != value); itemname = value;
            }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
