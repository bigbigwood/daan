/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Initlocalsetting
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _hostmac; 
		private string _hostname; 
		private string _a4printer; 
		private string _a5printer; 
		private string _barcodeprinter; 
		private string _pdfprinter;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Initlocalsetting()
		{
			_hostmac = null; 
			_hostname = null; 
			_a4printer = null; 
			_a5printer = null; 
			_barcodeprinter = null; 
			_pdfprinter = null;

		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主机MAC地址
		/// </summary>		
		public string Hostmac
		{
			get { return _hostmac; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Hostmac", value, value.ToString());
				
				_isChanged |= (_hostmac != value); _hostmac = value;
			}
		}
			
		/// <summary>
		/// 主机名字
		/// </summary>		
		public string Hostname
		{
			get { return _hostname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Hostname", value, value.ToString());
				
				_isChanged |= (_hostname != value); _hostname = value;
			}
		}
			
		/// <summary>
		/// A4报告打印机
		/// </summary>		
		public string A4printer
		{
			get { return _a4printer; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for A4printer", value, value.ToString());
				
				_isChanged |= (_a4printer != value); _a4printer = value;
			}
		}
			
		/// <summary>
		/// A5报告打印机
		/// </summary>		
		public string A5printer
		{
			get { return _a5printer; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for A5printer", value, value.ToString());
				
				_isChanged |= (_a5printer != value); _a5printer = value;
			}
		}
			
		/// <summary>
		/// 条码打印机
		/// </summary>		
		public string Barcodeprinter
		{
			get { return _barcodeprinter; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Barcodeprinter", value, value.ToString());
				
				_isChanged |= (_barcodeprinter != value); _barcodeprinter = value;
			}
		}
			
		/// <summary>
		/// PDF打印机名字
		/// </summary>		
		public string Pdfprinter
		{
			get { return _pdfprinter; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Pdfprinter", value, value.ToString());
				
				_isChanged |= (_pdfprinter != value); _pdfprinter = value;
			}
		}       
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
