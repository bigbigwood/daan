/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictdiagnosis:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? dictdiagnosisid; 
		private string diagnosisname; 
		private DateTime createdate; 
		private double? displayorder; 
		private string isdisease;
        private string diagnosistype;
		private string diseasedescription; 
		private string diseasecause; 
		private string suggestion; 
		private string engdiseasedescription; 
		private string engdiseasecause; 
		private string engsuggestion;
        private string diagnosiscode;//疾病代码

        public string Diagnosiscode
        {
            get { return diagnosiscode; }
            set { diagnosiscode = value; }
        }
        //科室ID
        private double? dictlabdeptid;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictdiagnosis()
		{
			dictdiagnosisid = null; 
			diagnosisname = null; 
			createdate = DateTime.Now; 
			displayorder = null; 
			isdisease = null;
            diagnosistype = null; 
			diseasedescription = null; 
			diseasecause = null; 
			suggestion = null; 
			engdiseasedescription = null; 
			engdiseasecause = null; 
			engsuggestion = null;

            dictlabdeptid = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public double? Dictdiagnosisid
		{
			get { return dictdiagnosisid; }
			set { isChanged |= (dictdiagnosisid != value); dictdiagnosisid = value; }
		}
			
		/// <summary>
		/// 诊断名称
		/// </summary>	
		[LogInfo("诊断名称")]
		public string Diagnosisname
		{
			get { return diagnosisname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Diagnosisname", value, value.ToString());
				
				isChanged |= (diagnosisname != value); diagnosisname = value;
			}
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 次序
		/// </summary>	
		[LogInfo("次序")]
		public double? Displayorder
		{
			get { return displayorder; }
			set { isChanged |= (displayorder != value); displayorder = value; }
		}
			
		/// <summary>
		/// 是否疾病,0:否；1：是
		/// </summary>	
		[LogInfo("是否疾病,0:否；1：是")]
		public string Isdisease
		{
			get { return isdisease; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Isdisease", value, value.ToString());
				
				isChanged |= (isdisease != value); isdisease = value;
			}
		}
			
		/// <summary>
		/// 疾病类型 对应INITBASIC表
		/// </summary>	
        [LogInfo("疾病类型,对应表INITBASIC")]
        public string Diagnosistype
        {
            get { return diagnosistype; }
            set { diagnosistype = value; }
        } 
		/// <summary>
		/// 疾病描述
		/// </summary>	
		[LogInfo("疾病描述")]
		public string Diseasedescription
		{
			get { return diseasedescription; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for DiseaseDescription", value, value.ToString());
				
				isChanged |= (diseasedescription != value); diseasedescription = value;
			}
		}
			
		/// <summary>
		/// 病因
		/// </summary>	
		[LogInfo("病因")]
		public string Diseasecause
		{
			get { return diseasecause; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for DiseaseCause", value, value.ToString());
				
				isChanged |= (diseasecause != value); diseasecause = value;
			}
		}
			
		/// <summary>
		/// 建议内容
		/// </summary>	
		[LogInfo("建议内容")]
		public string Suggestion
		{
			get { return suggestion; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Suggestion", value, value.ToString());
				
				isChanged |= (suggestion != value); suggestion = value;
			}
		}
			
		/// <summary>
		/// 疾病描述（英文）
		/// </summary>	
		[LogInfo("疾病描述（英文）")]
		public string Engdiseasedescription
		{
			get { return engdiseasedescription; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for EngDiseaseDescription", value, value.ToString());
				
				isChanged |= (engdiseasedescription != value); engdiseasedescription = value;
			}
		}
			
		/// <summary>
		/// 病因（英文）
		/// </summary>	
		[LogInfo("病因（英文）")]
		public string Engdiseasecause
		{
			get { return engdiseasecause; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for EngDdiseaseCause", value, value.ToString());
				
				isChanged |= (engdiseasecause != value); engdiseasecause = value;
			}
		}
			
		/// <summary>
		/// 建议内容（英文）
		/// </summary>	
		[LogInfo("建议内容（英文）")]
		public string Engsuggestion
		{
			get { return engsuggestion; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for EngSuggestion", value, value.ToString());
				
				isChanged |= (engsuggestion != value); engsuggestion = value;
			}
		}

        /// <summary>
        /// 科室ID
        /// </summary>	
        [LogInfo("科室ID")]
        public double? Dictlabdeptid
        {
            get { return dictlabdeptid; }
            set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
        }

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
