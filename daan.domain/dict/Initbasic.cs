/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Initbasic:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? basicid; 
		private string basictype; 
		private string basicvalue; 
		private string basicname; 
		private string remark; 
		private string fastcode; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Initbasic()
		{
			basicid = null; 
			basictype = null; 
			basicvalue = null; 
			basicname = null; 
			remark = null; 
			fastcode = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>	
		[LogInfo("主键，自动ID")]
		public double? Basicid
		{
			get { return basicid; }
			set { isChanged |= (basicid != value); basicid = value; }
		}
			
		/// <summary>
		/// 基本资料类别，例SEX，PATTYPE等
		/// </summary>	
		[LogInfo("基本资料类别，例SEX，PATTYPE等")]
		public string Basictype
		{
			get { return basictype; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Basictype", value, value.ToString());
				
				isChanged |= (basictype != value); basictype = value;
			}
		}
			
		/// <summary>
		/// 保存到业务表的值
		/// </summary>	
		[LogInfo("保存到业务表的值")]
		public string Basicvalue
		{
			get { return basicvalue; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Basicvalue", value, value.ToString());
				
				isChanged |= (basicvalue != value); basicvalue = value;
			}
		}
			
		/// <summary>
		/// 界面显示的值
		/// </summary>	
		[LogInfo("界面显示的值")]
		public string Basicname
		{
			get { return basicname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Basicname", value, value.ToString());
				
				isChanged |= (basicname != value); basicname = value;
			}
		}
			
		/// <summary>
		/// 备注
		/// </summary>	
		[LogInfo("备注")]
		public string Remark
		{
			get { return remark; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				isChanged |= (remark != value); remark = value;
			}
		}
			
		/// <summary>
		/// 快捷录入码
		/// </summary>	
		[LogInfo("快捷录入码")]
		public string Fastcode
		{
			get { return fastcode; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				isChanged |= (fastcode != value); fastcode = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
