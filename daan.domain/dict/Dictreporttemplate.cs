/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictreporttemplate:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? dictreporttemplateid; 
		private string templatename; 
		private string templatecode; 
		private DateTime createdate; 
		private string papersize; 
		private string singleappraise; 
		private double? reporttype; 
		private string remark; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictreporttemplate()
		{
			dictreporttemplateid = null; 
			templatename = null; 
			templatecode = null;
            createdate = DateTime.Now;
			papersize = null; 
			singleappraise = null; 
			reporttype = null; 
			remark = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public double? Dictreporttemplateid
		{
			get { return dictreporttemplateid; }
			set { isChanged |= (dictreporttemplateid != value); dictreporttemplateid = value; }
		}
			
		/// <summary>
		/// 模板名称
		/// </summary>	
		[LogInfo("模板名称")]
		public string Templatename
		{
			get { return templatename; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Templatename", value, value.ToString());
				
				isChanged |= (templatename != value); templatename = value;
			}
		}
			
		/// <summary>
		/// 模板代码
		/// </summary>	
		[LogInfo("模板代码")]
		public string Templatecode
		{
			get { return templatecode; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Templatecode", value, value.ToString());
				
				isChanged |= (templatecode != value); templatecode = value;
			}
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 纸张大小
		/// </summary>	
		[LogInfo("纸张大小")]
		public string Papersize
		{
			get { return papersize; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Papersize", value, value.ToString());
				
				isChanged |= (papersize != value); papersize = value;
			}
		}
			
		/// <summary>
		/// 是否单独评价、总检。0，不是；1，是。易感基因项目总检单独评价
		/// </summary>	
		[LogInfo("是否单独评价、总检。0，不是；1，是。易感基因项目总检单独评价")]
		public string Singleappraise
		{
			get { return singleappraise; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Singleappraise", value, value.ToString());
				
				isChanged |= (singleappraise != value); singleappraise = value;
			}
		}
			
		/// <summary>
		/// 报告类型对应dictlibary表报告类型的ID,有常规报告，HPV报告，易感基因报告
		/// </summary>	
		[LogInfo("报告类型对应dictlibary表报告类型的ID,有常规报告，HPV报告，易感基因报告")]
		public double? Reporttype
		{
			get { return reporttype; }
			set { isChanged |= (reporttype != value); reporttype = value; }
		}
			
		/// <summary>
		/// 备注
		/// </summary>	
		[LogInfo("备注")]
		public string Remark
		{
			get { return remark; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				isChanged |= (remark != value); remark = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
