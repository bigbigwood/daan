/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictscores:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? dictscoresid; 
		private double? dictlabdeptid; 
		private double? dicttestitemid; 
		private string resulttype; 
		private double? scores; 
		private double? displayorder; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictscores()
		{
			dictscoresid = null; 
			dictlabdeptid = null; 
			dicttestitemid = null; 
			resulttype = null; 
			scores = null; 
			displayorder = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public double? Dictscoresid
		{
			get { return dictscoresid; }
			set { isChanged |= (dictscoresid != value); dictscoresid = value; }
		}
			
		/// <summary>
		/// 测试项物理实验室分组,对应表DictLibrary
		/// </summary>	
		[LogInfo("测试项物理实验室分组,对应表DictLibrary")]
		public double? Dictlabdeptid
		{
			get { return dictlabdeptid; }
			set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
		}
			
		/// <summary>
		/// 项目ID  也就是基因位点ID
		/// </summary>	
		[LogInfo("项目ID  也就是基因位点ID")]
		public double? Dicttestitemid
		{
			get { return dicttestitemid; }
			set { isChanged |= (dicttestitemid != value); dicttestitemid = value; }
		}
			
		/// <summary>
		/// 结果枚举
		/// </summary>	
		[LogInfo("结果枚举")]
		public string Resulttype
		{
			get { return resulttype; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Resulttype", value, value.ToString());
				
				isChanged |= (resulttype != value); resulttype = value;
			}
		}
			
		/// <summary>
		/// 得分
		/// </summary>	
		[LogInfo("得分")]
		public double? Scores
		{
			get { return scores; }
			set { isChanged |= (scores != value); scores = value; }
		}
			
		/// <summary>
		/// 次序
		/// </summary>	
		[LogInfo("次序")]
		public double? Displayorder
		{
			get { return displayorder; }
			set { isChanged |= (displayorder != value); displayorder = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
