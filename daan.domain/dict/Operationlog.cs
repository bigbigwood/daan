/*
insert license info here
*/
using System;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Operationlog : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private double? operationid;
        private string ordernum;
        private string barcode;
        private string modulename;
        private string operatername;
        private double? operaterid;
        private string content;
        private string operationtype;
        private DateTime createdate;
        private string remark;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Operationlog()
        {
            operationid = null;
            ordernum = null;
            barcode = null;
            modulename = null;
            operatername = null;
            operaterid = null;
            content = null;
            operationtype = null;
            createdate = new DateTime();
            remark = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 主键
        /// </summary>	
        [LogInfo("主键")]
        public double? Operationid
        {
            get { return operationid; }
            set { isChanged |= (operationid != value); operationid = value; }
        }

        /// <summary>
        /// 体检订单号
        /// </summary>	
        [LogInfo("体检订单号")]
        public string Ordernum
        {
            get { return ordernum == null ? "" : ordernum; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());

                isChanged |= (ordernum != value); ordernum = value;
            }
        }

        /// <summary>
        /// 条码
        /// </summary>	
        [LogInfo("条码")]
        public string Barcode
        {
            get { return barcode == null ? "" : barcode; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Barcode", value, value.ToString());

                isChanged |= (barcode != value); barcode = value;
            }
        }

        /// <summary>
        /// 模块名称如：财务管理，总检
        /// </summary>	
        [LogInfo("模块名称如：财务管理，总检")]
        public string Modulename
        {
            get { return modulename == null ? "" : modulename; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Modulename", value, value.ToString());

                isChanged |= (modulename != value); modulename = value;
            }
        }

        /// <summary>
        /// 操作员姓名
        /// </summary>	
        [LogInfo("操作员姓名")]
        public string Operatername
        {
            get { return operatername == null ? "" : operatername; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Operatername", value, value.ToString());

                isChanged |= (operatername != value); operatername = value;
            }
        }

        /// <summary>
        /// 操作员在业务系统里的主键
        /// </summary>	
        [LogInfo("操作员在业务系统里的主键")]
        public double? Operaterid
        {
            get { return operaterid; }
            set { isChanged |= (operaterid != value); operaterid = value; }
        }

        /// <summary>
        /// 操作内容
        /// </summary>	
        [LogInfo("操作内容")]
        public string Content
        {
            get { return content == null ? "" : content; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for Content", value, value.ToString());

                isChanged |= (content != value); content = value;
            }
        }

        /// <summary>
        /// 操作的类型如：修改留痕，节点信息，增加备注
        /// </summary>	
        [LogInfo("操作的类型如：修改留痕，节点信息，增加备注")]
        public string Operationtype
        {
            get { return operationtype == null ? "" : operationtype; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Operationtype", value, value.ToString());

                isChanged |= (operationtype != value); operationtype = value;
            }
        }

        /// <summary>
        /// 创建时间
        /// </summary>	
        [LogInfo("创建时间")]
        public DateTime Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }

        /// <summary>
        /// 备注内容
        /// </summary>	
        [LogInfo("备注内容")]
        public string Remark
        {
            get { return remark == null ? "" : remark; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                isChanged |= (remark != value); remark = value;
            }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
