/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictuserandlab
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private  double? _dictuserandlabid; 
		private  double? _dictuserid; 
		private  double? _dictlabid; 
		private DateTime _createdate; 
		private  double? _displayorder;
        private string labname;
        private string username;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictuserandlab()
		{
			_dictuserandlabid = 0; 
			_dictuserid = 0; 
			_dictlabid = 0; 
			_createdate = new DateTime(); 
			_displayorder = 0;
            labname = null;
            username = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>		
		public  double? Dictuserandlabid
		{
			get { return _dictuserandlabid; }
			set { _isChanged |= (_dictuserandlabid != value); _dictuserandlabid = value; }
		}
			
		/// <summary>
		/// 用户ID，
		/// </summary>		
		public  double? Dictuserid
		{
			get { return _dictuserid; }
			set { _isChanged |= (_dictuserid != value); _dictuserid = value; }
		}

        /// <summary>
        /// 用户显示用户名称
        /// </summary>	
        [LogInfo("用户显示用户名称")]
        public string Username
        {
            get { return username; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());

                _isChanged |= (username != value); username = value;
            }
        }
			
		/// <summary>
		/// 分点ID
		/// </summary>		
		public  double? Dictlabid
		{
			get { return _dictlabid; }
			set { _isChanged |= (_dictlabid != value); _dictlabid = value; }
		}

        /// <summary>
        /// 试验室名称
        /// </summary>	
        [LogInfo("试验室名称")]
        public string Labname
        {
            get { return labname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Labname", value, value.ToString());

                _isChanged |= (labname != value); labname = value;
            }
        }
		/// <summary>
		/// 
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 排序
		/// </summary>		
		public  double? Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
