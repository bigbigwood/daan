/*
insert license info here
*/
using System;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Dicttestitem : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private double? dicttestitemid;
        private string fastcode;
        private string testcode;
        private string engname;
        private string englongname;
        private string testname;
        private double? precision;
        private double? displayorder;
        private double? price;
        private string billable;
        private string active;
        private string report;
        private string tubegroup;
        private double? dictcontainerid;
        private double? dictspecimentypeid;
        private string resulttype;
        private double? limithigh;
        private double? limitlow;
        private string forsex;
        private string refmethod;
        private string clinicalremark;
        private string operationremark;
        private double? deltacheck;
        private string deltatype;
        private string defaultresult;
        private string unit;
        private string remark;
        private string testtype;
        private double? dictlabdeptid;
        private string uniqueid;
        private double? dictcustomerid;
        private string issendouttest;
        private string testresulttype;
        private double? labelnumber;
        private double? dictreporttemplateid;
        private string isneededorder;
        private string isimportant;
        private double? dictlocusid;
        private string genotype;
        private string testalias;
        private string imageneed;
        private double? riskdenominator;
        private double? averagerisk;
        private double? maxriskmultiple;
        private double? minriskmultiple;
        private string isonlyforbill;

        public string Isonlyforbill
        {
            get { return isonlyforbill; }
            set { isonlyforbill = value; }
        }

        //--zhouy 体检登记使用------------
        /// <summary>
        /// 条码 
        /// </summary>
        public string Barcode { get; set; }

        private double? sendoutcustomerid;
        /// <summary>
        /// 外包客户ID 
        /// </summary>
        public double? Sendoutcustomerid
        {
            get { return sendoutcustomerid; }
            set { sendoutcustomerid = value; }
        }

        /// <summary>
        /// 是否是产品表示 '0'-不是 '1'-是
        /// </summary>
        public String IsProject { get; set; }

        private string sendbilled;
        /// <summary>
        /// 0-外包未生成账单清单  1- 外包已生成账单清单
        /// </summary>
        public string Sendbilled
        {
            get { return sendbilled; }
            set { sendbilled = value; }
        }

        private string billed;
        /// <summary>
        /// 0-未生成账单清单  1- 已生成账单清单
        /// </summary>
        public string Billed
        {
            get { return billed; }
            set { billed = value; }
        }

        private double? productid;
        /// <summary>
        /// 套餐ID
        /// </summary>
        public double? Productid
        {
            get { return productid; }
            set { productid = value; }
        }

        private string isactive;
        /// <summary>
        /// 是否停止
        /// </summary>
        public string IsActive
        {
            get { return isactive; }
            set { isactive = value; }
        }
        private string productname;
        /// <summary>
        /// 套餐名称
        /// </summary>
        public string Productname
        {
            get { return productname; }
            set { productname = value; }
        }

        private string isadd;
        /// <summary>
        /// 是否追加项目  0 否  1 是
        /// </summary>	
        [LogInfo("是否追加项目  0 否  1 是")]
        public string Isadd
        {
            get { return isadd; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for isadd", value, value.ToString());

                isChanged |= (isadd != value); isadd = value;
            }
        }


        private double? adduserid;
        /// <summary>
        /// 项目追加人
        /// </summary>	
        [LogInfo("项目追加人")]
        public double? Adduserid
        {
            get { return adduserid; }
            set { isChanged |= (adduserid != value); adduserid = value; }
        }

        //--end zhouy 体检登记使用--------
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        //public Dicttestitem()
        //{
        //    dicttestitemid = null; 
        //    fastcode = null; 
        //    testcode = null; 
        //    engname = null; 
        //    englongname = null; 
        //    testname = null; 
        //    precision = null; 
        //    displayorder = null; 
        //    price = null; 
        //    billable = null; 
        //    active = null; 
        //    report = null; 
        //    tubegroup = null; 
        //    dictcontainerid = null; 
        //    dictspecimentypeid = null; 
        //    resulttype = null; 
        //    limithigh = null; 
        //    limitlow = null; 
        //    forsex = null; 
        //    refmethod = null; 
        //    clinicalremark = null; 
        //    operationremark = null; 
        //    deltacheck = null; 
        //    deltatype = null; 
        //    defaultresult = null; 
        //    unit = null; 
        //    remark = null; 
        //    testtype = null; 
        //    dictlabdeptid = null; 
        //    uniqueid = null; 
        //    dictcustomerid = null; 
        //    //issendouttest = null; 
        //    testresulttype = null; 
        //    labelnumber = null; 
        //    dictreporttemplateid = null; 
        //    isneededorder = null; 
        //    isimportant = null; 
        //    dictlocusid = null; 
        //    genotype = null; 
        //    testalias = null; 
        //    imageneed = null; 
        //    riskdenominator = null; 
        //    averagerisk = null; 
        //    maxriskmultiple = null; 
        //    minriskmultiple = null; 
        //}
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 测试项主键
        /// </summary>	
        [LogInfo("测试项主键")]
        public double? Dicttestitemid
        {
            get { return dicttestitemid; }
            set { isChanged |= (dicttestitemid != value); dicttestitemid = value; }
        }

        /// <summary>
        /// 快捷录入码
        /// </summary>	
        [LogInfo("快捷录入码")]
        public string Fastcode
        {
            get { return fastcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());

                isChanged |= (fastcode != value); fastcode = value;
            }
        }

        /// <summary>
        /// 测试代码
        /// </summary>	
        [LogInfo("测试代码")]
        public string Testcode
        {
            get { return testcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Testcode", value, value.ToString());

                isChanged |= (testcode != value); testcode = value;
            }
        }

        /// <summary>
        /// 英文名（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("英文名（只有TESTTYPE=0需要维护）")]
        public string Engname
        {
            get { return engname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Engname", value, value.ToString());

                isChanged |= (engname != value); engname = value;
            }
        }

        /// <summary>
        /// 英文长名称（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("英文长名称（只有TESTTYPE=0需要维护）")]
        public string Englongname
        {
            get { return englongname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Englongname", value, value.ToString());

                isChanged |= (englongname != value); englongname = value;
            }
        }

        /// <summary>
        /// 测试项中文名字
        /// </summary>	
        [LogInfo("测试项中文名字")]
        public string Testname
        {
            get { return testname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Testname", value, value.ToString());

                isChanged |= (testname != value); testname = value;
            }
        }

        /// <summary>
        /// 精度，通常指小数位（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("精度，通常指小数位（只有TESTTYPE=0需要维护）")]
        public double? Precision
        {
            get { return precision; }
            set { isChanged |= (precision != value); precision = value; }
        }

        /// <summary>
        /// 排序
        /// </summary>	
        [LogInfo("排序")]
        public double? Displayorder
        {
            get { return displayorder; }
            set { isChanged |= (displayorder != value); displayorder = value; }
        }

        /// <summary>
        /// 价钱
        /// </summary>	
        [LogInfo("价钱")]
        public double? Price
        {
            get { return price; }
            set { isChanged |= (price != value); price = value; }
        }

        /// <summary>
        /// 是否需要计账0-NO 1-YES
        /// </summary>	
        [LogInfo("是否需要计账0-NO 1-YES")]
        public string Billable
        {
            get { return billable; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Billable", value, value.ToString());

                isChanged |= (billable != value); billable = value;
            }
        }

        /// <summary>
        /// 是否可用 0-否  1-是
        /// </summary>	
        [LogInfo("是否可用 0-否  1-是")]
        public string Active
        {
            get { return active; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());

                isChanged |= (active != value); active = value;
            }
        }

        /// <summary>
        /// 是否打印报告（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("是否打印报告（只有TESTTYPE=0需要维护）")]
        public string Report
        {
            get { return report; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Report", value, value.ToString());

                isChanged |= (report != value); report = value;
            }
        }

        /// <summary>
        /// 分管原则（只有TESTTYPE=0需要维护）与dictlibary表dictlibaryid关联
        /// </summary>	
        [LogInfo("分管原则（只有TESTTYPE=0需要维护）与dictlibary表dictlibaryid关联")]
        public string Tubegroup
        {
            get { return tubegroup; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Tubegroup", value, value.ToString());

                isChanged |= (tubegroup != value); tubegroup = value;
            }
        }

        /// <summary>
        /// 试管类型（只有TESTTYPE=0需要维护）与dictlibary表dictlibaryid关联
        /// </summary>	
        [LogInfo("试管类型（只有TESTTYPE=0需要维护）与dictlibary表dictlibaryid关联")]
        public double? Dictcontainerid
        {
            get { return dictcontainerid; }
            set { isChanged |= (dictcontainerid != value); dictcontainerid = value; }
        }

        /// <summary>
        /// 标本类型（只有TESTTYPE=0需要维护）与dictlibary表dictlibaryid关联
        /// </summary>	
        [LogInfo("标本类型（只有TESTTYPE=0需要维护）与dictlibary表dictlibaryid关联")]
        public double? Dictspecimentypeid
        {
            get { return dictspecimentypeid; }
            set { isChanged |= (dictspecimentypeid != value); dictspecimentypeid = value; }
        }

        /// <summary>
        /// 结果类型，（只有TESTTYPE=0需要维护）0 定量  1 文字描述
        /// </summary>	
        [LogInfo("结果类型，（只有TESTTYPE=0需要维护）0 定量  1 文字描述")]
        public string Resulttype
        {
            get { return resulttype; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Resulttype", value, value.ToString());

                isChanged |= (resulttype != value); resulttype = value;
            }
        }

        /// <summary>
        /// 限制高值（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("限制高值（只有TESTTYPE=0需要维护）")]
        public double? Limithigh
        {
            get { return limithigh; }
            set { isChanged |= (limithigh != value); limithigh = value; }
        }

        /// <summary>
        /// 限制低值（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("限制低值（只有TESTTYPE=0需要维护）")]
        public double? Limitlow
        {
            get { return limitlow; }
            set { isChanged |= (limitlow != value); limitlow = value; }
        }

        /// <summary>
        /// 测试项适用性别，M-男，F-女 ，B-俩者皆可
        /// </summary>	
        [LogInfo("测试项适用性别，M-男，F-女 ，B-俩者皆可")]
        public string Forsex
        {
            get { return forsex; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Forsex", value, value.ToString());

                isChanged |= (forsex != value); forsex = value;
            }
        }

        /// <summary>
        /// 参考值方式：<10,<=10,>20,1-20等等（只有TESTTYPE=0需要维护）对应initbasic表
        /// </summary>	
        [LogInfo("参考值方式：<10,<=10,>20,1-20等等（只有TESTTYPE=0需要维护）对应initbasic表")]
        public string Refmethod
        {
            get { return refmethod; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Refmethod", value, value.ToString());

                isChanged |= (refmethod != value); refmethod = value;
            }
        }

        /// <summary>
        /// 临床意义（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("临床意义（只有TESTTYPE=0需要维护）")]
        public string Clinicalremark
        {
            get { return clinicalremark; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Clinicalremark", value, value.ToString());

                isChanged |= (clinicalremark != value); clinicalremark = value;
            }
        }

        /// <summary>
        /// 体检指引（只有组合需要维护）
        /// </summary>	
        [LogInfo("体检指引（只有组合需要维护）")]
        public string Operationremark
        {
            get { return operationremark; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Operationremark", value, value.ToString());

                isChanged |= (operationremark != value); operationremark = value;
            }
        }

        /// <summary>
        /// 上次对比的设定值百分比（当前结果-上次结果）/当前结果的%值
        /// </summary>	
        [LogInfo("上次对比的设定值百分比（当前结果-上次结果）/当前结果的%值")]
        public double? Deltacheck
        {
            get { return deltacheck; }
            set { isChanged |= (deltacheck != value); deltacheck = value; }
        }

        /// <summary>
        /// 1-定量比较，结合本表字段DeltaCheck比较 2-定性比较，文字结果，则要求与上次结果须一样
        /// </summary>	
        [LogInfo("1-定量比较，结合本表字段DeltaCheck比较 2-定性比较，文字结果，则要求与上次结果须一样")]
        public string Deltatype
        {
            get { return deltatype; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Deltatype", value, value.ToString());

                isChanged |= (deltatype != value); deltatype = value;
            }
        }

        /// <summary>
        /// 默认结果（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("默认结果（只有TESTTYPE=0需要维护）")]
        public string Defaultresult
        {
            get { return defaultresult; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Defaultresult", value, value.ToString());

                isChanged |= (defaultresult != value); defaultresult = value;
            }
        }

        /// <summary>
        /// 单位（只有TESTTYPE=0需要维护）
        /// </summary>	
        [LogInfo("单位（只有TESTTYPE=0需要维护）")]
        public string Unit
        {
            get { return unit; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Unit", value, value.ToString());

                isChanged |= (unit != value); unit = value;
            }
        }

        /// <summary>
        /// 备注信息
        /// </summary>	
        [LogInfo("备注信息")]
        public string Remark
        {
            get { return remark; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                isChanged |= (remark != value); remark = value;
            }
        }

        /// <summary>
        /// 测试项的类别：0-单项  1-组合  2-公用套餐 3-客户套餐
        /// </summary>	
        [LogInfo("测试项的类别：0-单项  1-组合  2-公用套餐 3-客户套餐")]
        public string Testtype
        {
            get { return testtype; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Testtype", value, value.ToString());

                isChanged |= (testtype != value); testtype = value;
            }
        }

        /// <summary>
        /// 测试项物理实验室分组,对应表DICTLABDEPT
        /// </summary>	
        [LogInfo("测试项物理实验室分组,对应表DICTLABDEPT")]
        public double? Dictlabdeptid
        {
            get { return dictlabdeptid; }
            set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
        }

        /// <summary>
        /// 全国唯一编码（只有TESTTYPE=0，1需要维护）
        /// </summary>	
        [LogInfo("全国唯一编码（只有TESTTYPE=0，1需要维护）")]
        public string Uniqueid
        {
            get { return uniqueid; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Uniqueid", value, value.ToString());

                isChanged |= (uniqueid != value); uniqueid = value;
            }
        }

        /// <summary>
        /// 客户ID（只有TESTTYPE=3 客户套餐需要维护）对应dictCustomer表
        /// </summary>	
        [LogInfo("客户ID（只有TESTTYPE=3 客户套餐需要维护）对应dictCustomer表")]
        public double? Dictcustomerid
        {
            get { return dictcustomerid; }
            set { isChanged |= (dictcustomerid != value); dictcustomerid = value; }
        }

        /// <summary>
        /// 是否外包项目0-否  1-是 (组合用_zhouy)
        /// </summary>	
        [LogInfo("是否外包项目0-否  1-是")]
        public string Issendouttest
        {
            get { return issendouttest; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Issendouttest", value, value.ToString());

                isChanged |= (issendouttest != value); issendouttest = value;
            }
        }

        /// <summary>
        /// 测试结果类别  0  常规结果 1 病理结果 2易感基因结果3易感风险结果
        /// </summary>	
        [LogInfo("测试结果类别  0  常规结果 1 病理结果 2易感基因结果3易感风险结果")]
        public string Testresulttype
        {
            get { return testresulttype; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Testresulttype", value, value.ToString());

                isChanged |= (testresulttype != value); testresulttype = value;
            }
        }

        /// <summary>
        /// 条码标签份数
        /// </summary>	
        [LogInfo("条码标签份数")]
        public double? Labelnumber
        {
            get { return labelnumber; }
            set { isChanged |= (labelnumber != value); labelnumber = value; }
        }

        /// <summary>
        /// 报告ID
        /// </summary>	
        [LogInfo("报告ID")]
        public double? Dictreporttemplateid
        {
            get { return dictreporttemplateid; }
            set { isChanged |= (dictreporttemplateid != value); dictreporttemplateid = value; }
        }

        /// <summary>
        /// 是否必做套餐  1 是  0 否
        /// </summary>	
        [LogInfo("是否必做套餐  1 是  0 否")]
        public string Isneededorder
        {
            get { return isneededorder; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Isneededorder", value, value.ToString());

                isChanged |= (isneededorder != value); isneededorder = value;
            }
        }

        /// <summary>
        /// 是否对疾病判断重要的项目 1 是  0 不是
        /// </summary>	
        [LogInfo("是否对疾病判断重要的项目 1 是  0 不是")]
        public string Isimportant
        {
            get { return isimportant; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Isimportant", value, value.ToString());

                isChanged |= (isimportant != value); isimportant = value;
            }
        }

        /// <summary>
        /// （易感基因用）基因坐ID
        /// </summary>	
        [LogInfo("（易感基因用）基因坐ID")]
        public double? Dictlocusid
        {
            get { return dictlocusid; }
            set { isChanged |= (dictlocusid != value); dictlocusid = value; }
        }

        /// <summary>
        /// （易感基因用）可出现的基因结果类型
        /// </summary>	
        [LogInfo("（易感基因用）可出现的基因结果类型")]
        public string Genotype
        {
            get { return genotype; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Genotype", value, value.ToString());

                isChanged |= (genotype != value); genotype = value;
            }
        }

        /// <summary>
        /// （易感基因用）项目别名
        /// </summary>	
        [LogInfo("（易感基因用）项目别名")]
        public string Testalias
        {
            get { return testalias; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Testalias", value, value.ToString());

                isChanged |= (testalias != value); testalias = value;
            }
        }

        /// <summary>
        /// （易感基因用）基因位点是否出图，0不出，1出图
        /// </summary>	
        [LogInfo("（易感基因用）基因位点是否出图，0不出，1出图")]
        public string Imageneed
        {
            get { return imageneed; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Imageneed", value, value.ToString());

                isChanged |= (imageneed != value); imageneed = value;
            }
        }

        /// <summary>
        /// （易感基因用）风险运算分母
        /// </summary>	
        [LogInfo("（易感基因用）风险运算分母")]
        public double? Riskdenominator
        {
            get { return riskdenominator; }
            set { isChanged |= (riskdenominator != value); riskdenominator = value; }
        }

        /// <summary>
        /// （易感基因用）平均风险(易感基因用)
        /// </summary>	
        [LogInfo("（易感基因用）平均风险(易感基因用)")]
        public double? Averagerisk
        {
            get { return averagerisk; }
            set { isChanged |= (averagerisk != value); averagerisk = value; }
        }

        /// <summary>
        /// （易感基因用）疾病最大风险倍数(易感基因用)
        /// </summary>	
        [LogInfo("（易感基因用）疾病最大风险倍数(易感基因用)")]
        public double? Maxriskmultiple
        {
            get { return maxriskmultiple; }
            set { isChanged |= (maxriskmultiple != value); maxriskmultiple = value; }
        }

        /// <summary>
        /// （易感基因用）疾病最小风险倍数(易感基因用)
        /// </summary>	
        [LogInfo("（易感基因用）疾病最小风险倍数(易感基因用)")]
        public double? Minriskmultiple
        {
            get { return minriskmultiple; }
            set { isChanged |= (minriskmultiple != value); minriskmultiple = value; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
