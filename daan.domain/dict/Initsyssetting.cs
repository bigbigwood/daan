/*
insert license info here
*/
using System;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Initsyssetting : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private string copyright;
        private string website;
        private string remark;
        private string interfacemode;
        private double? initsyssettingid;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Initsyssetting()
        {
            copyright = null;
            website = null;
            remark = null;
            interfacemode = null;
            initsyssettingid = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 版权声明
        /// </summary>	
        [LogInfo("版权声明")]
        public string Copyright
        {
            get { return copyright; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Copyright", value, value.ToString());

                isChanged |= (copyright != value); copyright = value;
            }
        }

        /// <summary>
        /// 网站名称
        /// </summary>	
        [LogInfo("网站名称")]
        public string Website
        {
            get { return website; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Website", value, value.ToString());

                isChanged |= (website != value); website = value;
            }
        }

        /// <summary>
        /// 对当前使用数据库的说明
        /// </summary>	
        [LogInfo("对当前使用数据库的说明")]
        public string Remark
        {
            get { return remark; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                isChanged |= (remark != value); remark = value;
            }
        }

        /// <summary>
        /// 与其他系统对接方式 0 局域网内 1 WEBSERVICE
        /// </summary>	
        [LogInfo("与其他系统对接方式 0 局域网内 1 WEBSERVICE")]
        public string Interfacemode
        {
            get { return interfacemode; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Interfacemode", value, value.ToString());

                isChanged |= (interfacemode != value); interfacemode = value;
            }
        }

        /// <summary>
        /// 主键
        /// </summary>	
        [LogInfo("主键")]
        public double? Initsyssettingid
        {
            get { return initsyssettingid; }
            set { isChanged |= (initsyssettingid != value); initsyssettingid = value; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
