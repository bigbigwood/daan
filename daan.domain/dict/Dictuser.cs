/*
insert license info here
*/
using System;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Dictuser : BaseDomain
    {
            
       #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private double? dictuserid;
        private string usercode;
        private string password;
        private string username;
        private string active;
        private double? dictlabdeptid;
        private double? dictlabid;
        private string labname;
        private string labdeptname;
        private string joinlabid;
        private string joindeptId;

        public string Joindeptid
        {
            get { return joindeptId; }
            set { joindeptId = value; }
        }

        public string Joinlabid
        {
            get { return joinlabid; }
            set { joinlabid = value; }
        }
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Dictuser()
        {
            dictuserid = 0;
            usercode = null;
            password = null;
            username = null;
            active = null;
            dictlabdeptid = 0;
            dictlabid = 0;
            labname = null;
            labdeptname = null;
            joinlabid = "";
            Joindeptid = "";
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 用户ID，自增长
        /// </summary>	
        [LogInfo("用户ID，自增长")]
        public double? Dictuserid
        {
            get { return dictuserid; }
            set { isChanged |= (dictuserid != value); dictuserid = value; }
        }

        /// <summary>
        /// 相当于用户工号，如果是客户用户则填写客户编号
        /// </summary>	
        [LogInfo("相当于用户工号，如果是客户用户则填写客户编号")]
        public string Usercode
        {
            get { return usercode == null ? "" : usercode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Usercode", value, value.ToString());

                isChanged |= (usercode != value); usercode = value;
            }
        }

        /// <summary>
        /// 用户密码，该字段存放是经过MD5加密的用户密码。
        /// </summary>	
        [LogInfo("用户密码，该字段存放是经过MD5加密的用户密码。")]
        public string Password
        {
            get { return password == null ? "" : password; }
            set
            {
                if (value != null && value.Length > 256)
                    throw new ArgumentOutOfRangeException("Invalid value for Password", value, value.ToString());

                isChanged |= (password != value); password = value;
            }
        }

        /// <summary>
        /// 用户显示用户名称
        /// </summary>	
        [LogInfo("用户显示用户名称")]
        public string Username
        {
            get { return username == null ? "" : username; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());

                isChanged |= (username != value); username = value;
            }
        }

        /// <summary>
        /// 是否可用  0-否  1-是
        /// </summary>	
        [LogInfo("是否可用  0-否  1-是")]
        public string Active
        {
            get { return active; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());

                isChanged |= (active != value); active = value;
            }
        }

        /// <summary>
        /// 测试项物理实验室分组,对应表DictLibrary
        /// </summary>	
        [LogInfo("测试项物理实验室分组,对应表DictLibrary")]
        public double? Dictlabdeptid
        {
            get { return dictlabdeptid; }
            set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
        }

        /// <summary>
        /// 科室名称
        /// </summary>	
        [LogInfo("科室名称")]
        public string Labdeptname
        {
            get { return labdeptname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Labdeptname", value, value.ToString());

                isChanged |= (labdeptname != value); labdeptname = value;
            }
        }

        /// <summary>
        /// 分点ID
        /// </summary>	
        [LogInfo("分点ID")]
        public double? Dictlabid
        {
            get { return dictlabid; }
            set { isChanged |= (dictlabid != value); dictlabid = value; }
        }

        /// <summary>
        /// 试验室名称
        /// </summary>	
        [LogInfo("试验室名称")]
        public string Labname
        {
            get { return labname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Labname", value, value.ToString());

                isChanged |= (labname != value); labname = value;
            }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
