/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictlabandtest
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private  double? _dictlabandtestid; 
		private  double? _dictlabid; 
		private  double? _dicttestitemid; 
		private string _isactive;
		private DateTime? _createdate; 
		private string _issendouttest;
        private string testname;
        private string labname;
        private string uniqueid;
        private string testtype;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictlabandtest()
		{
			_dictlabandtestid = 0; 
			_dictlabid = 0; 
			_dicttestitemid = 0; 
			_isactive = null; 
			_createdate =null;
			_issendouttest = null;
            testname = null;
            labname = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>		
		public  double? Dictlabandtestid
		{
			get { return _dictlabandtestid; }
			set { _isChanged |= (_dictlabandtestid != value); _dictlabandtestid = value; }
		}
			
		/// <summary>
		/// 试验室ID
		/// </summary>		
		public  double? Dictlabid
		{
			get { return _dictlabid; }
			set { _isChanged |= (_dictlabid != value); _dictlabid = value; }
		}
			
		/// <summary>
		/// 检测项目
		/// </summary>		
		public  double? Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 1 可用  0 不可用
		/// </summary>		
		public string Isactive
		{
            get { return _isactive; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Isactive", value, value.ToString());
				
				_isChanged |= (_isactive != value); _isactive = value;
			}
		}

        /// <summary>
        /// 是否可用
        /// </summary>
         [LogInfo("1 可用 0 不可用")]
        public bool BoolIsactive
        {
            get { return Isactive == "1" ; }

        }
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 是否外包项目0-否  1-是
		/// </summary>		
		public string Issendouttest
		{
            get { return _issendouttest; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Issendouttest", value, value.ToString());
				
				_isChanged |= (_issendouttest != value); _issendouttest = value;
			}
		}


        /// <summary>
        /// 测试项中文名字
        /// </summary>	
        [LogInfo("测试项中文名字")]
        public string Testname
        {
            get { return testname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Testname", value, value.ToString());

                _isChanged |= (testname != value); testname = value;
            }
        }

        /// <summary>
        /// 试验室名称
        /// </summary>	
        [LogInfo("试验室名称")]
        public string Labname
        {
            get { return labname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Labname", value, value.ToString());

                _isChanged |= (labname != value); labname = value;
            }
        }
        ///// <summary>
        ///// 是否外包
        ///// </summary>
        public bool BoolIssendouttest
        {
            get { return Issendouttest == "1"; }

        } 
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}

      
		#endregion 
        /// <summary>
        /// 测试项的类别：0-单项  1-组合  2-公用套餐 3-客户套餐
        /// </summary>	
        [LogInfo("测试项的类别：0-单项  1-组合  2-公用套餐 3-客户套餐")]
        public string Testtype
        {
            get { return testtype == null ? "" : testtype; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Testtype", value, value.ToString());

                _isChanged |= (testtype != value); testtype = value;
            }
        }


        /// <summary>
        /// 全国唯一编码（只有TESTTYPE=0，1需要维护）
        /// </summary>	
        [LogInfo("全国唯一编码（只有TESTTYPE=0，1需要维护）")]
        public string Uniqueid
        {
            get { return uniqueid == null ? "" : uniqueid; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Uniqueid", value, value.ToString());

                _isChanged |= (uniqueid != value); uniqueid = value;
            }
        }
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
