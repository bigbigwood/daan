/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictlibraryitem:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? dictlibraryitemid; 
		private double? dictlibraryid; 
		private string wubicode; 
		private string pinyincode; 
		private string fastcode; 
		private string itemname; 
		private double? displayorder; 
		private string remark; 
		private string isactive; 
		private DateTime createdate;
        private string librarycode;
        private string libraryname;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictlibraryitem()
		{
			dictlibraryitemid = 0; 
			dictlibraryid = 0; 
			wubicode = null; 
			pinyincode = null; 
			fastcode = null; 
			itemname = null; 
			displayorder = null; 
			remark = null; 
			isactive = "1"; 
			createdate =DateTime.Now;
            librarycode = null;
            libraryname=null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public double? Dictlibraryitemid
		{
			get { return dictlibraryitemid; }
			set { isChanged |= (dictlibraryitemid != value); dictlibraryitemid = value; }
		}
			
		/// <summary>
		/// 字典类别ID
		/// </summary>	
		[LogInfo("字典类别ID")]
		public double? Dictlibraryid
		{
			get { return dictlibraryid; }
			set { isChanged |= (dictlibraryid != value); dictlibraryid = value; }
		}
			
		/// <summary>
		/// 五笔代码
		/// </summary>	
		[LogInfo("五笔代码")]
		public string Wubicode
		{
			get { return wubicode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Wubicode", value, value.ToString());
				
				isChanged |= (wubicode != value); wubicode = value;
			}
		}
			
		/// <summary>
		/// 拼音码
		/// </summary>	
		[LogInfo("拼音码")]
		public string Pinyincode
		{
			get { return pinyincode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Pinyincode", value, value.ToString());
				
				isChanged |= (pinyincode != value); pinyincode = value;
			}
		}
			
		/// <summary>
		/// 自定义码
		/// </summary>	
		[LogInfo("自定义码")]
		public string Fastcode
		{
			get { return fastcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				isChanged |= (fastcode != value); fastcode = value;
			}
		}
			
		/// <summary>
		/// 名称
		/// </summary>	
		[LogInfo("名称")]
		public string Itemname
		{
			get { return itemname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Itemname", value, value.ToString());
				
				isChanged |= (itemname != value); itemname = value;
			}
		}
			
		/// <summary>
		/// 排序
		/// </summary>	
		[LogInfo("排序")]
		public double? Displayorder
		{
			get { return displayorder; }
			set { isChanged |= (displayorder != value); displayorder = value; }
		}
			
		/// <summary>
		/// 备注
		/// </summary>	
		[LogInfo("备注")]
		public string Remark
		{
			get { return remark; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				isChanged |= (remark != value); remark = value;
			}
		}
			
		/// <summary>
		/// 1 可用 0 不可用
		/// </summary>	
		[LogInfo("1 可用 0 不可用")]
		public string Isactive
		{
			get { return isactive; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Isactive", value, value.ToString());
				
				isChanged |= (isactive != value); isactive = value;
			}
		}
        /// <summary>
        /// 1 可用 0 不可用
        /// </summary>	
        [LogInfo("1 可用 0 不可用")]
        public bool BoolIsactive
        {
            get { return Isactive=="1"; }            
        }

			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}

        /// <summary>
        /// 代码
        /// </summary>	
        [LogInfo("代码", LogInfoAttribute.LOGFIELDOPTION)]
        public string Librarycode
        {
            get { return librarycode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Librarycode", value, value.ToString());

                isChanged |= (librarycode != value); librarycode = value;
            }
        }
        /// <summary>
		/// 字典分类名称
		/// </summary>	
        [LogInfo("字典分类名称")]
        public string Libraryname
		{
            get { return libraryname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Isactive", value, value.ToString());

                isChanged |= (libraryname != value); libraryname = value;
			}
		}


        
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
