/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictlocusremark:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? dictlocusremarkid; 
		private double? dictlabdeptid; 
		private double? dictlocusid; 
		private string remark; 
		private double? displayorder; 
		private DateTime createdate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictlocusremark()
		{
			dictlocusremarkid = null; 
			dictlabdeptid = null; 
			dictlocusid = null; 
			remark = null; 
			displayorder = null; 
			createdate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public double? Dictlocusremarkid
		{
			get { return dictlocusremarkid; }
			set { isChanged |= (dictlocusremarkid != value); dictlocusremarkid = value; }
		}
			
		/// <summary>
		/// 测试项物理实验室分组,对应表DictLibrary
		/// </summary>	
		[LogInfo("测试项物理实验室分组,对应表DictLibrary")]
		public double? Dictlabdeptid
		{
			get { return dictlabdeptid; }
			set { isChanged |= (dictlabdeptid != value); dictlabdeptid = value; }
		}
			
		/// <summary>
		/// 基因座ID,,对应表DictLibrary
		/// </summary>	
		[LogInfo("基因座ID,,对应表DictLibrary")]
		public double? Dictlocusid
		{
			get { return dictlocusid; }
			set { isChanged |= (dictlocusid != value); dictlocusid = value; }
		}
			
		/// <summary>
		/// 基因座简介
		/// </summary>	
		[LogInfo("基因座简介")]
		public string Remark
		{
			get { return remark; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				isChanged |= (remark != value); remark = value;
			}
		}
			
		/// <summary>
		/// 次序
		/// </summary>	
		[LogInfo("次序")]
		public double? Displayorder
		{
			get { return displayorder; }
			set { isChanged |= (displayorder != value); displayorder = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
