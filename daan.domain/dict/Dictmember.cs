/*
insert license info here
*/
using System;
using System.Web;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Dictmember : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private double? dictmemberid;
        private DateTime? logintime;
        private string active;
        private string islock;
        private double? levelsid;
        private double? consumer;
        private DateTime? createdate;
        private string avatar;
        private string email;
        private double? scores;
        private string loginname;
        private string password;
        private string nickname;
        private double? loginnum;
        private string loginip;
        private string loginkey;
        private string url;
        private string qq;
        private string msn;
        private string phone;
        private string mobile;
        private string zpcode;
        private string addres;
        private string idnumber;
        private DateTime? birthday;
        private string sex;
        private string realname;
        private string age;
        private string ismarried;
        private double? caculatedage;

        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Dictmember()
        {
            dictmemberid = null;
            logintime =null;
            active = null;
            islock = null;
            levelsid = null;
            consumer = null;
            createdate = new DateTime();
            avatar = null;
            email = null;
            scores = null;
            loginname = null;
            password = null;
            nickname = null;
            loginnum = 0;
            loginip = null;
            loginkey = null;
            url = null;
            qq = null;
            msn = null;
            phone = null;
            mobile = null;
            zpcode = null;
            addres = null;
            idnumber = null;
            birthday = null;
            sex = null;
            realname = null;
            age = null;
            ismarried = null;
            caculatedage = 0;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public double? Dictmemberid
        {
            get { return dictmemberid; }
            set { isChanged |= (dictmemberid != value); dictmemberid = value; }
        }

        /// <summary>
        /// 记录最后一次登陆时间
        /// </summary>	
        [LogInfo("记录最后一次登陆时间")]
        public DateTime? Logintime
        {
            get { return logintime; }
            set { isChanged |= (logintime != value); logintime = value; }
        }

        /// <summary>
        /// 是否激活
        /// </summary>	
        [LogInfo("是否激活")]
        public string Active
        {
            get { return active; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());

                isChanged |= (active != value); active = value;
            }
        }

        /// <summary>
        /// 是否锁定
        /// </summary>	
        [LogInfo("是否锁定")]
        public string Islock
        {
            get { return islock; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Islock", value, value.ToString());

                isChanged |= (islock != value); islock = value;
            }
        }

        /// <summary>
        /// 级别
        /// </summary>	
        [LogInfo("级别")]
        public double? Levelsid
        {
            get { return levelsid; }
            set { isChanged |= (levelsid != value); levelsid = value; }
        }

        /// <summary>
        /// 消费
        /// </summary>	
        [LogInfo("消费")]
        public double? Consumer
        {
            get { return consumer; }
            set { isChanged |= (consumer != value); consumer = value; }
        }

        /// <summary>
        /// 注册时间
        /// </summary>	
        [LogInfo("注册时间")]
        public DateTime? Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }

        /// <summary>
        /// 头像
        /// </summary>	
        [LogInfo("头像")]
        public string Avatar
        {
            get { return avatar; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Avatar", value, value.ToString());

                isChanged |= (avatar != value); avatar = value;
            }
        }

        /// <summary>
        /// Email地址
        /// </summary>	
        [LogInfo("Email地址")]
        public string Email
        {
            get { return email; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Email", value, value.ToString());

                isChanged |= (email != value); email = value;
            }
        }

        /// <summary>
        /// 积分
        /// </summary>	
        [LogInfo("积分")]
        public double? Scores
        {
            get { return scores; }
            set { isChanged |= (scores != value); scores = value; }
        }

        /// <summary>
        /// 用户名
        /// </summary>	
        [LogInfo("用户名")]
        public string Loginname
        {
            get { return loginname ?? ""; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Loginname", value, value.ToString());

                isChanged |= (loginname != value); loginname = value;
            }
        }

        /// <summary>
        /// 密码
        /// </summary>	
        [LogInfo("密码")]
        public string Password
        {
            get { return password; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Password", value, value.ToString());

                isChanged |= (password != value); password = value;
            }
        }

        /// <summary>
        /// 昵称
        /// </summary>	
        [LogInfo("昵称")]
        public string Nickname
        {
            get { return nickname ?? ""; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Nickname", value, value.ToString());

                isChanged |= (nickname != value); nickname = value;
            }
        }

        /// <summary>
        /// 记录帐号登陆的次数
        /// </summary>	
        [LogInfo("记录帐号登陆的次数")]
        public double? Loginnum
        {
            get { return loginnum; }
            set { isChanged |= (loginnum != value); loginnum = value; }
        }

        /// <summary>
        /// 记录最后一次登陆的计算机IP
        /// </summary>	
        [LogInfo("记录最后一次登陆的计算机IP")]
        public string Loginip
        {
            get { return loginip; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Loginip", value, value.ToString());

                isChanged |= (loginip != value); loginip = value;
            }
        }

        /// <summary>
        /// 最后登陆KEY
        /// </summary>	
        [LogInfo("最后登陆KEY")]
        public string Loginkey
        {
            get { return loginkey; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Loginkey", value, value.ToString());

                isChanged |= (loginkey != value); loginkey = value;
            }
        }

        /// <summary>
        /// 个人网址
        /// </summary>	
        [LogInfo("个人网址")]
        public string Url
        {
            get { return url; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Url", value, value.ToString());

                isChanged |= (url != value); url = value;
            }
        }

        /// <summary>
        /// QQ
        /// </summary>	
        [LogInfo("QQ")]
        public string Qq
        {
            get { return qq; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Qq", value, value.ToString());

                isChanged |= (qq != value); qq = value;
            }
        }

        /// <summary>
        /// MSN
        /// </summary>	
        [LogInfo("MSN")]
        public string Msn
        {
            get { return msn; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Msn", value, value.ToString());

                isChanged |= (msn != value); msn = value;
            }
        }

        /// <summary>
        /// 联系电话
        /// </summary>	
        [LogInfo("联系电话")]
        public string Phone
        {
            get { return phone; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Phone", value, value.ToString());

                isChanged |= (phone != value); phone = value;
            }
        }

        /// <summary>
        /// 手机号码
        /// </summary>	
        [LogInfo("手机号码")]
        public string Mobile
        {
            get { return mobile; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Mobile", value, value.ToString());

                isChanged |= (mobile != value); mobile = value;
            }
        }

        /// <summary>
        /// 邮政编号
        /// </summary>	
        [LogInfo("邮政编号")]
        public string Zpcode
        {
            get { return zpcode; }
            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for Zpcode", value, value.ToString());

                isChanged |= (zpcode != value); zpcode = value;
            }
        }

        /// <summary>
        /// 详细地址
        /// </summary>	
        [LogInfo("详细地址")]
        public string Addres
        {
            get { return addres; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Addres", value, value.ToString());

                isChanged |= (addres != value); addres = value;
            }
        }

        /// <summary>
        /// 身份证号码
        /// </summary>	
        [LogInfo("身份证号码")]
        public string Idnumber
        {
            get { return idnumber; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Idnumber", value, value.ToString());

                isChanged |= (idnumber != value); idnumber = value;
            }
        }

        /// <summary>
        /// 出生日期
        /// </summary>	
        [LogInfo("出生日期")]
        public DateTime? Birthday
        {
            get { return birthday; }
            set { isChanged |= (birthday != value); birthday = value; }
        }

        /// <summary>
        /// 性别 对应INITBASIC表
        /// </summary>	
        [LogInfo("性别 对应INITBASIC表")]
        public string Sex
        {
            get { return sex; }
            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for Sex", value, value.ToString());

                isChanged |= (sex != value); sex = value;
            }
        }

        /// <summary>
        ///转换成 男-女-未知
        /// </summary>
        public string SexName
        {
            get
            {
                string sexstr = "未知";
                switch (Sex)
                {
                    case "M":
                        sexstr = "男";
                        break;
                    case "F":
                        sexstr = "女";
                        break;
                    default:
                        break;
                }
                return sexstr;
            }
        }


        /// <summary>
        /// 真实姓名
        /// </summary>	
        [LogInfo("真实姓名")]
        public string Realname
        {
            get { return realname; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Realname", value, value.ToString());

                isChanged |= (realname != value); realname = value;
            }
        }

        /// <summary>
        /// 年龄
        /// </summary>	
        [LogInfo("年龄")]
        public string Age
        {
            get { return age; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Age", value, value.ToString());

                isChanged |= (age != value); age = value;
            }
        }

        /// <summary>
        /// 是否结婚
        /// </summary>	
        [LogInfo("是否结婚")]
        public string Ismarried
        {
            get { return ismarried; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Islock", value, value.ToString());

                isChanged |= (ismarried != value); ismarried = value;
            }
        }

        /// <summary>
        /// 计算后的年龄
        /// </summary>	
        [LogInfo("计算后的年龄")]
        public double? Caculatedage
        {
            get { return caculatedage; }
            set { isChanged |= (caculatedage != value); caculatedage = value; }
        }
        /// <summary>
        /// 是否添加|修改
        /// </summary>
        public bool isAdd { get; set; }

        public string FormatBirthday
        {
            get
            {
                if (Birthday != null)
                {

                    return Birthday.Value.ToString("yyyy-MM-dd");
                }
                else
                {
                    return null;
                }
            }
        }
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
