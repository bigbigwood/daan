/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictdiagnosesmutex:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private double? dictdiagnosesmutexid; 
		private double? dictdiagnosisid; 
		private double? dictmutexdiagnosisid; 
		private DateTime createdate;

        private string diagnosisname; 
      
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
        public Dictdiagnosesmutex()
		{
            dictdiagnosesmutexid = null;
            dictdiagnosisid = null;
            dictmutexdiagnosisid = null; 
			createdate = DateTime.Now;
            diagnosisname = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties

        /// <summary>主键
		/// 
		/// </summary>	
		[LogInfo("主键")]
        public double? Dictdiagnosesmutexid
		{
            get { return dictdiagnosesmutexid; }
            set { isChanged |= (dictdiagnosesmutexid != value); dictdiagnosesmutexid = value; }
		}

        /// <summary>诊断ID
		/// 
		/// </summary>	
        [LogInfo("诊断ID")]
        public double? Dictdiagnosisid
		{
            get { return dictdiagnosisid; }
            set { isChanged |= (dictdiagnosisid != value); dictdiagnosisid = value; }
		}

        /// <summary>次序
		/// 
		/// </summary>	
        [LogInfo("互斥诊断ID")]
        public double? Dictmutexdiagnosisid
		{
            get { return dictmutexdiagnosisid; }
            set { isChanged |= (dictmutexdiagnosisid != value); dictmutexdiagnosisid = value; }
		}

        /// <summary>创建时间
        /// 
        /// </summary>	
        [LogInfo("创建时间")]
        public DateTime Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }

        /// <summary>诊断名称
        /// 
        /// </summary>	
        [LogInfo("诊断名称")]
        public string Diagnosisname
        {
            get { return diagnosisname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Diagnosisname", value, value.ToString());

                isChanged |= (diagnosisname != value); diagnosisname = value;
            }
        }

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
