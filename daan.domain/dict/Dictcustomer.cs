/*
insert license info here
*/
using System;

namespace daan.domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Dictcustomer
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
        private double? _dictcustomerid; 
		private string _customercode; 
		private string _fastcode; 
		private string _customername;
        private string _customername2; 
		private string _customerengname; 
		private string _engaddress;
        private double? _displayorder; 
		private string _address; 
		private string _telephone; 
		private string _fax; 
		private string _postcode; 
		private string _contactman; 
		private string _contactphone; 
		private string _email; 
		private string _active; 
		private string _remark; 
		private string _status; 
		private string _erpcode; 
		private string _erpname; 
		private string _documenttype; 
		private string _documentcode;
        private double? _dictsalemanid;
        private double? _dictcheckbillid; 
		private DateTime _lastupdatedate;
        private double? _dictlabid; 
		private string _customertype; 
		private string _reporttitle;
        private string _issms;

        private string _ispublic;
        private string _ygsyncstatus;
        private string _dzsyncstatus;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictcustomer()
		{
			_dictcustomerid = 0; 
			_customercode = null; 
			_fastcode = null; 
			_customername = null;
            _customername2 = null; 
			_customerengname = null; 
			_engaddress = null; 
			_displayorder = 0; 
			_address = null; 
			_telephone = null; 
			_fax = null; 
			_postcode = null; 
			_contactman = null; 
			_contactphone = null; 
			_email = null; 
			_active = null; 
			_remark = null; 
			_status = null; 
			_erpcode = null; 
			_erpname = null; 
			_documenttype = null; 
			_documentcode = null; 
			_dictsalemanid = 0; 
			_dictcheckbillid = 0; 
			_lastupdatedate = new DateTime(); 
			_dictlabid = 0; 
			_customertype = null; 
			_reporttitle = null;
            _issms = null;
            _ispublic = null;
            _ygsyncstatus = null;
            _dzsyncstatus = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
        public double? Dictcustomerid
		{
			get { return _dictcustomerid; }
			set { _isChanged |= (_dictcustomerid != value); _dictcustomerid = value; }
		}
			
		/// <summary>
		/// 客户代码
		/// </summary>		
		public string Customercode
		{
			get { return _customercode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Customercode", value, value.ToString());
				
				_isChanged |= (_customercode != value); _customercode = value;
			}
		}
			
		/// <summary>
		/// 助记符
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
		/// <summary>
		/// 客户名称
		/// </summary>		
		public string Customername
		{
			get { return _customername; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Customername", value, value.ToString());
				
				_isChanged |= (_customername != value); _customername = value;
			}
		}
        /// <summary>
        /// 客户别名
        /// </summary>		
        public string Customername2
        {
            get { return _customername2; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Customername2", value, value.ToString());

                _isChanged |= (_customername2 != value); _customername2 = value;
            }
        }
			
		/// <summary>
		/// 客户英文名称
		/// </summary>		
		public string Customerengname
		{
			get { return _customerengname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Customerengname", value, value.ToString());
				
				_isChanged |= (_customerengname != value); _customerengname = value;
			}
		}
			
		/// <summary>
		/// 客户英文地址
		/// </summary>		
		public string Engaddress
		{
			get { return _engaddress; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Engaddress", value, value.ToString());
				
				_isChanged |= (_engaddress != value); _engaddress = value;
			}
		}
			
		/// <summary>
		/// 排序
		/// </summary>		
        public double? Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 地址
		/// </summary>		
		public string Address
		{
			get { return _address; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Address", value, value.ToString());
				
				_isChanged |= (_address != value); _address = value;
			}
		}
			
		/// <summary>
		/// 电话
		/// </summary>		
		public string Telephone
		{
			get { return _telephone; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Telephone", value, value.ToString());
				
				_isChanged |= (_telephone != value); _telephone = value;
			}
		}
			
		/// <summary>
		/// 传真
		/// </summary>		
		public string Fax
		{
			get { return _fax; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Fax", value, value.ToString());
				
				_isChanged |= (_fax != value); _fax = value;
			}
		}
			
		/// <summary>
		/// 邮编
		/// </summary>		
		public string Postcode
		{
			get { return _postcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Postcode", value, value.ToString());
				
				_isChanged |= (_postcode != value); _postcode = value;
			}
		}
			
		/// <summary>
		/// 联系人
		/// </summary>		
		public string Contactman
		{
			get { return _contactman; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Contactman", value, value.ToString());
				
				_isChanged |= (_contactman != value); _contactman = value;
			}
		}
			
		/// <summary>
		/// 联系人电话
		/// </summary>		
		public string Contactphone
		{
			get { return _contactphone; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Contactphone", value, value.ToString());
				
				_isChanged |= (_contactphone != value); _contactphone = value;
			}
		}
			
		/// <summary>
		/// 邮箱地址
		/// </summary>		
		public string Email
		{
			get { return _email; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Email", value, value.ToString());
				
				_isChanged |= (_email != value); _email = value;
			}
		}
			
		/// <summary>
		/// 是否可用  0-否 1-是
		/// </summary>		
		public string Active
		{
			get { return _active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				_isChanged |= (_active != value); _active = value;
			}
		}
        /// <summary>
        /// 是否短信提醒 0否 1是
        /// </summary>
        public string Issms
        {
            get { return _issms; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Issms", value, value.ToString());

                _isChanged |= (_issms != value); _issms = value;
            }
        } 
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 客户状态：合作客户/意向客户/终止客户
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_isChanged |= (_status != value); _status = value;
			}
		}
			
		/// <summary>
		/// ERP客户代号
		/// </summary>		
		public string Erpcode
		{
			get { return _erpcode; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Erpcode", value, value.ToString());
				
				_isChanged |= (_erpcode != value); _erpcode = value;
			}
		}
			
		/// <summary>
		/// ERP客户名称
		/// </summary>		
		public string Erpname
		{
			get { return _erpname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Erpname", value, value.ToString());
				
				_isChanged |= (_erpname != value); _erpname = value;
			}
		}
			
		/// <summary>
		/// 证件类型
		/// </summary>		
		public string Documenttype
		{
			get { return _documenttype; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Documenttype", value, value.ToString());
				
				_isChanged |= (_documenttype != value); _documenttype = value;
			}
		}
			
		/// <summary>
		/// 证件代号
		/// </summary>		
		public string Documentcode
		{
			get { return _documentcode; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Documentcode", value, value.ToString());
				
				_isChanged |= (_documentcode != value); _documentcode = value;
			}
		}
			
		/// <summary>
		/// 销售人员ID，对应表DictUser
		/// </summary>		
        public double? Dictsalemanid
		{
			get { return _dictsalemanid; }
			set { _isChanged |= (_dictsalemanid != value); _dictsalemanid = value; }
		}
			
		/// <summary>
		/// 财务清单核对人，来源于DICTUSER
		/// </summary>		
        public double? Dictcheckbillid
		{
			get { return _dictcheckbillid; }
			set { _isChanged |= (_dictcheckbillid != value); _dictcheckbillid = value; }
		}
			
		/// <summary>
		/// 最后操作时间，新增、修改都要保存最后操作的时间
		/// </summary>		
		public DateTime Lastupdatedate
		{
			get { return _lastupdatedate; }
			set { _isChanged |= (_lastupdatedate != value); _lastupdatedate = value; }
		}
			
		/// <summary>
		/// 分点实验室ID
		/// </summary>		
        public double? Dictlabid
		{
			get { return _dictlabid; }
			set { _isChanged |= (_dictlabid != value); _dictlabid = value; }
		}
			
		/// <summary>
		/// 0- 一般客户 1-外包客户
		/// </summary>		
		public string Customertype
		{
			get { return _customertype; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Customertype", value, value.ToString());
				
				_isChanged |= (_customertype != value); _customertype = value;
			}
		}
			
		/// <summary>
		/// 客户自定义报告单抬头
		/// </summary>		
		public string Reporttitle
		{
			get { return _reporttitle; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Reporttitle", value, value.ToString());
				
				_isChanged |= (_reporttitle != value); _reporttitle = value;
			}
		}

        /// <summary>
        /// 是否公用单位
        /// </summary>
        public string IsPublic
        {
            get { return _ispublic; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for IsPublic", value, value.ToString());

                _isChanged |= (_ispublic != value); _ispublic = value;
            }
        }

        /// <summary>
        /// 易感基因系统同步状态
        /// </summary>
        public string YGSyncStatus
        {
            get { return _ygsyncstatus; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for YGSyncStatus", value, value.ToString());

                _isChanged |= (_ygsyncstatus != value); _ygsyncstatus = value;
            }
        }

        /// <summary>
        /// 大众健康系统同步状态
        /// </summary>
        public string DZSyncStatus
        {
            get { return _dzsyncstatus; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for DZSyncStatus", value, value.ToString());

                _isChanged |= (_dzsyncstatus != value); _dzsyncstatus = value;
            }
        }

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
