/*
insert license info here
*/
using System;

namespace daan.domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class Billdetail : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private double? billdetailid;
        private double? billheadid;
        private string ordernum;
        private double? dicttestitemid;
        private double? standardprice;
        private double? groupprice;
        private double? contractprice;
        private double? finalprice;
        private string status;
        private string remark;
        private string selfremark;
        private DateTime createdate;
        private double? enterby;
        private DateTime enterdate;
        private string testname;
        private double? dictproductid;
        private string productname;

        private string realname;
        private double? testcount;
        private DateTime? orderenterdate;
        private string ids;
        private string testitemids;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Billdetail()
        {
            billdetailid = null;
            billheadid = null;
            ordernum = null;
            dicttestitemid = null;
            standardprice = null;
            groupprice = null;
            contractprice = null;
            finalprice = null;
            status = null;
            remark = null;
            selfremark = null;
            createdate = new DateTime();
            enterby = null;
            enterdate = new DateTime();
            testname = null;
            dictproductid = null;
            productname = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 保存同一ordernum下的所有账单明细编号
        /// </summary>
        public string Ids
        {
            get { return ids; }
            set { ids = value; }
        }

        /// <summary>
        /// 保存同一ordernum下的检查项目编号
        /// </summary>
        public string Testitemids
        {
            get { return testitemids; }
            set { testitemids = value; }
        }

        /// <summary>
        /// 真实姓名
        /// </summary>
        public string Realname
        {
            get { return realname; }
            set { realname = value; }
        }

        /// <summary>
        /// 项目数目
        /// </summary>
        public double? Testcount
        {
            get { return testcount; }
            set { testcount = value; }
        }

        /// <summary>
        /// 订单录入时间
        /// </summary>
        public DateTime? Orderenterdate
        {
            get { return orderenterdate; }
            set { orderenterdate = value; }
        }
    
        /// <summary>
        /// 主键，自动ID
        /// </summary>	
        [LogInfo("主键，自动ID")]
        public double? Billdetailid
        {
            get { return billdetailid; }
            set { isChanged |= (billdetailid != value); billdetailid = value; }
        }

        /// <summary>
        /// 外键，对应表BILLHEAD
        /// </summary>	
        [LogInfo("外键，对应表BILLHEAD")]
        public double? Billheadid
        {
            get { return billheadid; }
            set { isChanged |= (billheadid != value); billheadid = value; }
        }

        /// <summary>
        /// 体检流水号
        /// </summary>	
        [LogInfo("体检流水号")]
        public string Ordernum
        {
            get { return ordernum; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Ordernum", value, value.ToString());

                isChanged |= (ordernum != value); ordernum = value;
            }
        }

        /// <summary>
        /// 测试项ID
        /// </summary>	
        [LogInfo("测试项ID")]
        public double? Dicttestitemid
        {
            get { return dicttestitemid; }
            set { isChanged |= (dicttestitemid != value); dicttestitemid = value; }
        }

        /// <summary>
        /// 标准价格
        /// </summary>	
        [LogInfo("标准价格")]
        public double? Standardprice
        {
            get { return standardprice; }
            set { isChanged |= (standardprice != value); standardprice = value; }
        }

        /// <summary>
        /// 所在区域的达安标准收费
        /// </summary>	
        [LogInfo("所在区域的达安标准收费")]
        public double? Groupprice
        {
            get { return groupprice; }
            set { isChanged |= (groupprice != value); groupprice = value; }
        }

        /// <summary>
        /// 应收价钱
        /// </summary>	
        [LogInfo("应收价钱")]
        public double? Contractprice
        {
            get { return contractprice; }
            set { isChanged |= (contractprice != value); contractprice = value; }
        }

        /// <summary>
        /// 实收价钱
        /// </summary>	
        [LogInfo("实收价钱")]
        public double? Finalprice
        {
            get { return finalprice; }
            set { isChanged |= (finalprice != value); finalprice = value; }
        }

        /// <summary>
        /// 测试项的账单状态，对应表INITBASIC  显示正常或者调价
        /// </summary>	
        [LogInfo("测试项的账单状态，对应表INITBASIC  显示正常或者调价")]
        public string Status
        {
            get { return status; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());

                isChanged |= (status != value); status = value;
            }
        }

        /// <summary>
        /// 财务备注
        /// </summary>	
        [LogInfo("财务备注")]
        public string Remark
        {
            get { return remark; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                isChanged |= (remark != value); remark = value;
            }
        }

        /// <summary>
        /// 内部备注
        /// </summary>	
        [LogInfo("内部备注")]
        public string Selfremark
        {
            get { return selfremark; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Selfremark", value, value.ToString());

                isChanged |= (selfremark != value); selfremark = value;
            }
        }

        /// <summary>
        /// 记录生成日期
        /// </summary>	
        [LogInfo("记录生成日期")]
        public DateTime Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }

        /// <summary>
        /// 记录录入人
        /// </summary>	
        [LogInfo("记录录入人")]
        public double? Enterby
        {
            get { return enterby; }
            set { isChanged |= (enterby != value); enterby = value; }
        }

        /// <summary>
        /// 记录录入时间
        /// </summary>	
        [LogInfo("记录录入时间")]
        public DateTime Enterdate
        {
            get { return enterdate; }
            set { isChanged |= (enterdate != value); enterdate = value; }
        }

        /// <summary>
        /// 套餐编号
        /// </summary>
        [LogInfo("套餐编号")]
        public double? Dictproductid
        {
            get { return dictproductid; }
            set { isChanged |= (dictproductid != value); dictproductid = value; }
        }
        /// <summary>
        /// 测试项中文名
        /// </summary>
        [LogInfo("测试项中文名")]
        public string Testname
        {
            get { return testname; }
            set { isChanged |= (testname != value); testname = value; }
        }

        /// <summary>
        /// 套餐名称
        /// </summary>
        [LogInfo("套餐名称")]
        public string Productname
        {
            get { return productname; }
            set { isChanged |= (productname != value); productname = value; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
